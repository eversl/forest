; Definitions for syntax extensions needed to read the patterns 
(extend "core.patterns.forest")
(extend "core.rules.forest")

(extend "standard.patterns.forest")
(extend "standard.rules.forest")

;;;;;;;;;;;;;;;;;;;;; define identifiers, keywords, etc

(rule comma (tok ","))

(rule letterordigit (/ letterchar digitchar "$" "<" "=" ">" "~" "_" "!" "%" "&" "*" "-" "+" "?" ":" "/" "@"))

(rule identifier (tok (< (+ (! keyword) (! digitchar) (*1 letterordigit)))))

;;;;;;;;;;;;;;;;;;;;; add sexprs terms

(insert sexpr (braces (braces (+ (tok "functional") (* functional)))))


;;;;;;;;;;;;;;;;;;;;; functional terms

(insert functional (@ "functiondef" (+ (kw "function") identifier funcbody)))

(rule funcbody (seq (@ "defcase" (+ functionargs (tok "=") conditionalexpr)) (tok "|")))

(rule functionargs (@ "functionargs" (parens (+ (* (+ conditionalexpr comma)) (? (/ listvariable conditionalexpr))))))

(rule listvariable (@ "listvariable" (+ identifier (tok "..."))))

(rule conditionalexpr (/ (@ "ifexpr" (+ functionalexpr (kw "if") conditionalexpr (kw "else") functionalexpr))
                          functionalexpr))

(insert functionalexpr (/ (@ "functionref" (+ identifier functionargs))
                          (@ "variable" (+ identifier))))

(insert functionalexpr (@ "constant" (+ stringliteral)))
(insert functionalexpr (@ "varfunctionref" (+ (tok "`") identifier (tok "`") functionargs)))

(insert functionalexpr (@ "anondef" (+ (kw "function") funcbody)))
