; Definitions for patterns needed to read the java grammar definitions 

(import "core.patterns.forest")
(import "core.rules.forest")

(import "standard.patterns.forest")
(import "standard.rules.forest")


(termpattern 
  [functiondef : 'fname
    '''defcases]
  [functiondef-xf : 'fname [lst] '''defcases])

(termpattern 
 [functiondef-xf : 'fname [lst : '''ready] [defcase : 'patt 'repl] '''defcases]
 [functiondef-xf : 'fname [lst : '''ready [defcase-xf : 'fname 'patt 'repl]] '''defcases])

(termpattern 
   [functiondef-xf : 'fname [lst : '''ready]]
   (+ '''ready (unexpanded [pattern : 
     [term : 'fname (unreplaced '''r)] 
     (unexpanded (unexpanded [error : "Invalid use of functional pattern '" 'fname "': " (unreplaced '''r)]))])))

(termpattern 
 [defcase-xf : 'fname [functionargs : '''args] 'res]
 [defcase-xf : 'fname [functionargs-xf : [lst] [lst] '''args] 'res])

(termpattern 
 [defcase-xf : 'fname [functionargs-xf : [lst : '''usedvars] [lst : '''args]] [functionalexpr : [lst : '''v] 'res]]
 (unexpanded [pattern : [term : 'fname '''args] 'res]))

(termpattern 
 [functionargs-xf : [lst : '''usedvars] [lst : '''done] [functionalexpr : [lst : '''vars] 'arg] '''args]
 [functionargs-xf : [lst : '''usedvars '''vars] [lst : '''done  'arg] '''args])


;;;;;;;;;;; anondef
(termpattern 
  [anondef : '''defcases]
  [namedanondef : (unexpanded [newname]) '''defcases])

(termpattern 
  [namedanondef : [name : 'fname] '''defcases]
  [namedanondef-xf : 'fname [lst] '''defcases])

(termpattern 
 [namedanondef-xf : 'fname [lst : '''ready] [defcase : 'patt 'repl] '''defcases]
 [namedanondef-xf : 'fname [lst : '''ready [anondefcase-xf : 'patt 'repl]] '''defcases])

(termpattern 
   [namedanondef-xf : 'fname [lst : '''ready]]
   [namedanondef-xf2 : 'fname [lst] [lst] '''ready])

(termpattern 
   [namedanondef-xf2 : 'fname [lst : '''closurevars] [lst : '''ready] [anondefcase-xf : [functionargs-xf : 'pattvars 'funargs] [functionalexpr : 'replvars 'repl]] '''defcases]
   [namedanondef-xf2 : 'fname [lst : '''closurevars [setdiff : 'replvars 'pattvars]] [lst : '''ready [anondefcase-xf2 : 'funargs 'repl]] '''defcases])

(termpattern 
   [namedanondef-xf2 : 'fname [lst : '''closurevars] [lst : '''ready]]
   [namedanondef-xf3 : 'fname [flatten-lst : '''closurevars] [lst : '''ready]])
(termpattern 
   [namedanondef-xf3 : 'fname [lst : '''closurevars] [lst : [anondefcase-xf2 : [lst : '''patt] 'repl] '''cases] '''done]
   [namedanondef-xf3 : 'fname [lst : '''closurevars] [lst : '''cases] (unexpanded (unexpanded [pattern : [term : 'fname '''closurevars '''patt] 'repl]))])

(termpattern 
   [namedanondef-xf3 : 'fname [lst : '''closurevars] [lst] '''done]
   [functionalexpr : [lst : '''closurevars] [closure : (unexpanded (unexpanded (unexpanded [pattern : 
     [term : 'fname (unreplaced '''r)] 
     (unexpanded (unexpanded [error : "Invalid use of closure pattern '" 'fname "': " (unreplaced '''r)]))]))) '''closurevars]])

(termpattern 
 [anondefcase-xf : [functionargs : '''args] 'repl]
 [anondefcase-xf : [functionargs-xf : [lst] [lst] '''args] 'repl])


;;;;;;;;;;;; functionref
(termpattern 
  [functionref : 'patname [functionargs : '''args]] 
  [functionref : 'patname [functionargs-xf : [lst] [lst] '''args]])

(termpattern 
  [functionref : 'patname [functionargs-xf : [lst : '''usedvars] [lst : '''args]]] 
  [functionalexpr : [lst : '''usedvars] [term : 'patname '''args]])

(termpattern 
  [variable : 'v] 
  [functionalexpr : [lst : [var : 'v]] [var : 'v]])

(termpattern 
  [listvariable : 'v] 
  [functionalexpr : [lst : [varlist : 'v]] [varlist : 'v]])

(termpattern 
  [constant : 'v] 
  [functionalexpr : [lst] 'v])

(termpattern 
  [varfunctionref : 'varname [functionargs : '''args]]
  [varfunctionref : 'varname [functionargs-xf : [lst] [lst] '''args]])

(termpattern 
  [varfunctionref : 'varname [functionargs-xf : [lst : '''usedvars] [lst : '''args]]] 
  [functionalexpr : [lst : '''usedvars] [term : [var : 'varname] '''args]])


;;;;;;;;;;;;;;;; setdiff

(termpattern 
  [setdiff : [lst : '''elems] [lst]] 
  [lst : '''elems])
(termpattern 
  [setdiff : [lst : '''elems] [lst : 'elem '''elems2]] 
  [setdiff : [remove-elem : 'elem [lst : '''elems]] [lst : '''elems2]])

;;;;;;;;;;;;;;;; remove

(termpattern 
  [remove-elem : 'elem [lst : '''elems]] 
  [remove-elem-xf : [lst] 'elem [lst : '''elems]])
(termpattern 
  [remove-elem-xf : [lst : '''done] 'elem [lst : 'elem '''elems]] 
  [remove-elem-xf : [lst : '''done] 'elem [lst : '''elems]])
(termpattern 
  [remove-elem-xf : [lst : '''done] 'elem [lst : 'elem2 '''elems]] 
  [remove-elem-xf : [lst : '''done 'elem2] 'elem [lst : '''elems]])
(termpattern 
  [remove-elem-xf : [lst : '''done] 'elem [lst]] 
  [lst : '''done])

;;;;;;;;;; flatten-lst

(termpattern 
  [flatten-lst : [lst : '''lst1] [lst : '''lst2] '''rest] 
  [flatten-lst : [lst : '''lst1 '''lst2] '''rest])
(termpattern 
  [flatten-lst : [lst : '''lst1]] 
  [lst : '''lst1])
(termpattern 
  [flatten-lst : [lst]] 
  [lst])

