(extend "core.forest")

(extend "functional.patterns.forest")
(extend "functional.rules.forest")

;;;;;;;; closure ;;;;;;;;;;;

(termpattern 
  [[closure : [name : 'fn] '''cl-args] :'''args]
  ['fn : '''cl-args '''args])
(termpattern 
  [[closure : 'fn '''cl-args] :'''args]
  ['fn : '''cl-args '''args])

(termpattern
  [doif : [false] 'thenexpr 'elseexpr]
  'elseexpr)  

(termpattern
  [doif : 'true 'thenexpr 'elseexpr]
  'thenexpr)  

;;;;;;;; cons ;;;;;;;;;;;

(termpattern [cons : 'hd [lst : '''tl]]
             [lst : 'hd '''tl])


{{ functional             

function map (fn, lst(hd, tl...)) = cons( `fn`(hd), map(fn, lst(tl...)))
           | (fn, lst(    tl...)) = lst(tl...)


function filter (pred, lst(hd, tl...)) = if_( `pred`(hd), cons(hd, filter(pred, lst(tl...))), filter(pred, lst(tl...)))
              | (pred, lst(    tl...)) = lst(tl...)

function foldl (fn, init, lst(hd, tl...)) = foldl(fn, `fn`(init, hd), lst(tl...))
             | (fn, init, lst()) = init

function foldr (fn, init, lst(hd, tl...)) = `fn`(hd, foldr(fn, init, lst(tl...)))
             | (fn, init, lst()) = init

function reduce (fn, lst(hd)) = hd
              | (fn, lst(hd, tl...)) = `fn`(hd, reduce(fn, lst(tl...)))


function eq (a, a) = true()            

function and () = true()
           | (val) = val
           | (false(), rest...) = false()
           | (true, rest...) = and(rest...)

function or () = false()
          | (false(), rest...) = or(rest...)
          | (val, rest...) = val

function seq (val) = val
           | (val, rest...) = seq(rest...)
}}

