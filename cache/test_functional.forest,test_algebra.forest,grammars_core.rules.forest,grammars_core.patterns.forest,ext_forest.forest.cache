(make-lang (list "test/functional.forest" "test/algebra.forest" "grammars/core.rules.forest" "grammars/core.patterns.forest" "ext/forest.forest")
(list (list 'map
    (cons (lmt #f #f #f "map" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "map") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "map" (lmt #f #f #f "var" (lmtk 1 1 1 "fn")) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl")))) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl"))))
    (cons (lmt #f #f #f "map" (lmt #f #f #f "var" (lmtk 1 1 1 "fn")) (lmt #f #f #f "lst" (lmt #f #f #f "var" (lmtk 1 1 1 "hd")) (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl")))) (lmt #f #f #f "cons" (lmt #f #f #f (mt "var" "fn") (lmt #f #f #f "var" (lmtk 1 1 1 "hd"))) (lmt #f #f #f "map" (lmt #f #f #f "var" (lmtk 1 1 1 "fn")) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl")))))))
  (list '*
    (cons (lmt #f #f #f "*" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "%*%" (lmt #f #f #f "newname" ) (lmt #f #f #f "var" (lmtk 1 1 1 "c")))))
  (list 'pred
    (cons (lmt #f #f #f "pred" (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "a")))) (lmt #f #f #f "var" (lmtk 1 1 1 "a"))))
  (list 'times
    (cons (lmt #f #f #f "times" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "times") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "times" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "b")))) (lmt #f #f #f "plus" (lmt #f #f #f "times" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "var" (lmtk 1 1 1 "b"))) (lmt #f #f #f "var" (lmtk 1 1 1 "a"))))
    (cons (lmt #f #f #f "times" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "zero" )) (lmt #f #f #f "zero" )))
  (list 'plus
    (cons (lmt #f #f #f "plus" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "plus") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "plus" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "pred" (lmt #f #f #f "var" (lmtk 1 1 1 "b")))) (lmt #f #f #f "plus" (lmt #f #f #f "pred" (lmt #f #f #f "var" (lmtk 1 1 1 "a"))) (lmt #f #f #f "var" (lmtk 1 1 1 "b"))))
    (cons (lmt #f #f #f "plus" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "b")))) (lmt #f #f #f "plus" (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "a"))) (lmt #f #f #f "var" (lmtk 1 1 1 "b"))))
    (cons (lmt #f #f #f "plus" (lmt #f #f #f "zero" ) (lmt #f #f #f "var" (lmtk 1 1 1 "b"))) (lmt #f #f #f "var" (lmtk 1 1 1 "b")))
    (cons (lmt #f #f #f "plus" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "zero" )) (lmt #f #f #f "var" (lmtk 1 1 1 "a"))))
  (list 'two
    (cons (lmt #f #f #f "two" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "two") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "two" ) (lmt #f #f #f "succ" (lmt #f #f #f "one" ))))
  (list 'succ
    (cons (lmt #f #f #f "succ" (lmt #f #f #f "pred" (lmt #f #f #f "var" (lmtk 1 1 1 "a")))) (lmt #f #f #f "var" (lmtk 1 1 1 "a"))))
  (list 'neg
    (cons (lmt #f #f #f "neg" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "neg") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "neg" (lmt #f #f #f "var" (lmtk 1 1 1 "a"))) (lmt #f #f #f "minus" (lmt #f #f #f "zero" ) (lmt #f #f #f "var" (lmtk 1 1 1 "a")))))
  (list 'three
    (cons (lmt #f #f #f "three" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "three") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "three" ) (lmt #f #f #f "succ" (lmt #f #f #f "two" ))))
  (list 'one
    (cons (lmt #f #f #f "one" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "one") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "one" ) (lmt #f #f #f "succ" (lmt #f #f #f "zero" ))))
  (list 'filter
    (cons (lmt #f #f #f "filter" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "filter") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "filter" (lmt #f #f #f "var" (lmtk 1 1 1 "pred")) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl")))) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl"))))
    (cons (lmt #f #f #f "filter" (lmt #f #f #f "var" (lmtk 1 1 1 "pred")) (lmt #f #f #f "lst" (lmt #f #f #f "var" (lmtk 1 1 1 "hd")) (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl")))) (lmt #f #f #f "if" (lmt #f #f #f (mt "var" "pred") (lmt #f #f #f "var" (lmtk 1 1 1 "hd"))) (lmt #f #f #f "cons" (lmt #f #f #f "var" (lmtk 1 1 1 "hd")) (lmt #f #f #f "filter" (lmt #f #f #f "var" (lmtk 1 1 1 "pred")) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl"))))) (lmt #f #f #f "filter" (lmt #f #f #f "var" (lmtk 1 1 1 "pred")) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl")))))))
  (list '?
    (cons (lmt #f #f #f "?" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "/" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "null" ))))
  (list 'minus
    (cons (lmt #f #f #f "minus" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "minus") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "minus" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "b")))) (lmt #f #f #f "minus" (lmt #f #f #f "pred" (lmt #f #f #f "var" (lmtk 1 1 1 "a"))) (lmt #f #f #f "var" (lmtk 1 1 1 "b"))))
    (cons (lmt #f #f #f "minus" (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "a"))) (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "b")))) (lmt #f #f #f "minus" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "var" (lmtk 1 1 1 "b"))))
    (cons (lmt #f #f #f "minus" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "pred" (lmt #f #f #f "var" (lmtk 1 1 1 "b")))) (lmt #f #f #f "minus" (lmt #f #f #f "succ" (lmt #f #f #f "var" (lmtk 1 1 1 "a"))) (lmt #f #f #f "var" (lmtk 1 1 1 "b"))))
    (cons (lmt #f #f #f "minus" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "zero" )) (lmt #f #f #f "var" (lmtk 1 1 1 "a"))))
  (list 'false
    (cons (lmt #f #f #f "false" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "false") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "false" ) (lmt #f #f #f "boolean" (lmt #f #f #f "closure" (lmt #f #f #f "name" "g58")))))
  (list 'true
    (cons (lmt #f #f #f "true" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "true") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "true" ) (lmt #f #f #f "boolean" (lmt #f #f #f "closure" (lmt #f #f #f "name" "g58")))))
  (list 'g58
    (cons (lmt #f #f #f "g58" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of closure pattern '")) "g58" (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "g58" (lmt #f #f #f "var" (lmtk 1 1 1 "then")) (lmt #f #f #f "var" (lmtk 1 1 1 "else"))) (lmt #f #f #f "var" (lmtk 1 1 1 "else")))
    (cons (lmt #f #f #f "g58" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of closure pattern '")) "g58" (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "g58" (lmt #f #f #f "var" (lmtk 1 1 1 "then")) (lmt #f #f #f "var" (lmtk 1 1 1 "else"))) (lmt #f #f #f "var" (lmtk 1 1 1 "then")))
    (cons (lmt #f #f #f "g58" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of closure pattern '")) "g58" (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "g58" (lmt #f #f #f "var" (lmtk 1 1 1 "n")) (lmt #f #f #f "var" (lmtk 1 1 1 "v"))) (lmt #f #f #f "plus" (lmt #f #f #f "var" (lmtk 1 1 1 "n")) (lmt #f #f #f "var" (lmtk 1 1 1 "v")))))
  (list 'map+n
    (cons (lmt #f #f #f "map+n" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "map+n") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "map+n" (lmt #f #f #f "var" (lmtk 1 1 1 "n")) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl")))) (lmt #f #f #f "map" (lmt #f #f #f "closure" (lmt #f #f #f "name" "g58") (lmt #f #f #f "var" (lmtk 1 1 1 "n"))) (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmtk 1 1 1 "tl"))))))
  (list '||
    (cons (lmt #f #f #f (mt "closure" (mt "var" "fn") (mt "varlist" "cl-args")) (lmt 2 304 311 "varlist" (lmtk 1 1 1 "args"))) (lmt #f #f #f (mt "var" "fn") (lmt 2 322 333 "varlist" (lmtk 1 1 1 "cl-args")) (lmt 2 333 340 "varlist" (lmtk 1 1 1 "args"))))
    (cons (lmt #f #f #f (mt "closure" (mt "name" (mt "var" "fn")) (mt "varlist" "cl-args")) (lmt 2 220 227 "varlist" (lmtk 1 1 1 "args"))) (lmt #f #f #f (mt "var" "fn") (lmt 2 238 249 "varlist" (lmtk 1 1 1 "cl-args")) (lmt 2 249 256 "varlist" (lmtk 1 1 1 "args")))))
  (list 'if
    (cons (lmt #f #f #f "if" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "if") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "if" (lmt #f #f #f "boolean" (lmt #f #f #f "var" (lmtk 1 1 1 "pred"))) (lmt #f #f #f "var" (lmtk 1 1 1 "then")) (lmt #f #f #f "var" (lmtk 1 1 1 "else"))) (lmt #f #f #f (mt "var" "pred") (lmt #f #f #f "var" (lmtk 1 1 1 "then")) (lmt #f #f #f "var" (lmtk 1 1 1 "else")))))
  (list 'eq
    (cons (lmt #f #f #f "eq" (lmt #f #f #f "varlist" (lmtk 1 1 1 "r"))) (lmt #f #f #f "term" (lmt #f #f #f "name" (lmtk 1 1 1 "error")) (lmt #f #f #f "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmtk 1 1 1 "eq") (lmt #f #f #f "string" (lmtk 1 1 1 "'."))))
    (cons (lmt #f #f #f "eq" (lmt #f #f #f "var" (lmtk 1 1 1 "a")) (lmt #f #f #f "var" (lmtk 1 1 1 "a"))) (lmt #f #f #f "true" )))
  (list '&
    (cons (lmt #f #f #f "&" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "!" (lmt #f #f #f "!" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))))))
  (list '%*%
    (cons (lmt #f #f #f "%*%" (lmt #f #f #f "var" (lmtk 1 1 1 "n")) (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "rule" (lmt #f #f #f "var" (lmtk 1 1 1 "n")) (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "var" (lmtk 1 1 1 "n"))) (lmt #f #f #f "null" )))))
  (list 'cons
    (cons (lmt #f #f #f "cons" (lmt 2 392 396 "var" (lmtk 1 1 1 "hd")) (lmt #f #f #f "lst" (lmt 2 403 408 "varlist" (lmtk 1 1 1 "tl")))) (lmt #f #f #f "lst" (lmt 2 431 435 "var" (lmtk 1 1 1 "hd")) (lmt 2 435 440 "varlist" (lmtk 1 1 1 "tl")))))
  (list 'parens
    (cons (lmt #f #f #f "parens" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "+" (lmt #f #f #f "tok" (lmt #f #f #f "string" (lmtk 1 1 1 "("))) (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "tok" (lmt #f #f #f "string" (lmtk 1 1 1 ")"))))))
  (list 'tok
    (cons (lmt #f #f #f "tok" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "+" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))))
  (list 'sym
    (cons (lmt #f #f #f "sym" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "tok" (lmt #f #f #f "+" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))))))))
(list (cons 'namechar (lmt #f #f #f "/" (lmt #f #f #f "name" (lmtk 1 1 1 "letterchar")) (lmt #f #f #f "name" (lmtk 1 1 1 "digitchar")) (lmt #f #f #f "string" (lmtk 1 1 1 "$")) (lmt #f #f #f "string" (lmtk 1 1 1 "<")) (lmt #f #f #f "string" (lmtk 1 1 1 "=")) (lmt #f #f #f "string" (lmtk 1 1 1 ">")) (lmt #f #f #f "string" (lmtk 1 1 1 "^")) (lmt #f #f #f "string" (lmtk 1 1 1 "`")) (lmt #f #f #f "string" (lmtk 1 1 1 "|")) (lmt #f #f #f "string" (lmtk 1 1 1 "~")) (lmt #f #f #f "string" (lmtk 1 1 1 "_")) (lmt #f #f #f "string" (lmtk 1 1 1 "!")) (lmt #f #f #f "string" (lmtk 1 1 1 "%")) (lmt #f #f #f "string" (lmtk 1 1 1 "&")) (lmt #f #f #f "string" (lmtk 1 1 1 "*")) (lmt #f #f #f "string" (lmtk 1 1 1 "-")) (lmt #f #f #f "string" (lmtk 1 1 1 "+")) (lmt #f #f #f "string" (lmtk 1 1 1 "?")) (lmt #f #f #f "string" (lmtk 1 1 1 ":")) (lmt #f #f #f "string" (lmtk 1 1 1 "/")) (lmt #f #f #f "string" (lmtk 1 1 1 "@")) (lmt #f #f #f "string" (lmtk 1 1 1 "."))))
  (cons 'newline (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "returnchar")) (lmt #f #f #f "name" (lmtk 1 1 1 "linefeedchar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "returnchar")) (lmt #f #f #f "name" (lmtk 1 1 1 "linefeedchar"))))
  (cons 'name (lmt #f #f #f "//" (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "var")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "'")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "nameliteral")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "varlist")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "'''")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "nameliteral")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "nameliteral")))))
  (cons 'sexprs (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs"))) (lmt #f #f #f "null" )))
  (cons 'stringchars (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "anychar")) (lmt #f #f #f "name" (lmtk 1 1 1 "stringchars"))) (lmt #f #f #f "null" )))
  (cons 'nameliteral (lmt #f #f #f "+" (lmt #f #f #f "<" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "namechars")))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))
  (cons 'whitespace (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "/" (lmt #f #f #f "name" (lmtk 1 1 1 "whitespacechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "linecomment"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))) (lmt #f #f #f "null" )))
  (cons 'start (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "declarations")) (lmt #f #f #f "name" (lmtk 1 1 1 "endoffile"))))
  (cons 'namechars (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "namechars"))) (lmt #f #f #f "null" )))
  (cons 'endoffile (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "anychar"))))
  (cons 'commentchars (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "newline"))) (lmt #f #f #f "name" (lmtk 1 1 1 "anychar")) (lmt #f #f #f "name" (lmtk 1 1 1 "commentchars"))) (lmt #f #f #f "null" )))
  (cons 'declarations (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "declaration")) (lmt #f #f #f "name" (lmtk 1 1 1 "declarations"))) (lmt #f #f #f "null" )))
  (cons 'declaration (lmt #f #f #f ">" (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr"))))
  (cons 'stringliteral (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "<" (lmt #f #f #f "name" (lmtk 1 1 1 "stringchars"))) (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))
  (cons 'linecomment (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 ";")) (lmt #f #f #f "name" (lmtk 1 1 1 "commentchars")) (lmt #f #f #f "name" (lmtk 1 1 1 "newline"))))
  (cons 'sexpr (lmt #f #f #f "//" (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "term")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "[")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 ":")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs"))) (lmt #f #f #f "null" )) (lmt #f #f #f "string" (lmtk 1 1 1 "]")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unreplaced")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "unreplaced")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "?")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "?")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "parens")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "parens")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "*")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "*")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "null")) (lmt #f #f #f "name" (lmtk 1 1 1 "null"))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "^<")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "^<")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "^=")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "^=")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "^>")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "^>")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "$")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "$")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 ">")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ">")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "@")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "@")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "<")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "<")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "!")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "!")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "/")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "/")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "//")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "//")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "+")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "+")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "term")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "term")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "import")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "import")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "stringliteral")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "newname")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "newname")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "insert")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "insert")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "rule")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "rule")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "pattern")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "syntaxpattern")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr"))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr"))) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "string")) (lmt #f #f #f "name" (lmtk 1 1 1 "stringliteral"))) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "%*%")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "%*%")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "tok")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "tok")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "sym")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "sym")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "&")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "&")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "pattern")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "termpattern")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "token")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "#")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "<" (lmt #f #f #f "name" (lmtk 1 1 1 "stringchars"))) (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))))
  (cons 'null (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))))