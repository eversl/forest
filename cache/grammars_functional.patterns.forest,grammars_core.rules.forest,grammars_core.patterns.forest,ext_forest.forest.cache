(make-lang (list "grammars/functional.patterns.forest" "grammars/core.rules.forest" "grammars/core.patterns.forest" "ext/forest.forest")
(list (list '*
    (cons (lmt #f #f #f "*" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "%*%" (lmt #f #f #f "newname" ) (lmt #f #f #f "var" (lmtk 1 1 1 "c")))))
  (list 'functionref
    (cons (lmt #f #f #f "functionref" (lmt 0 3241 3250 "var" (lmtk 1 1 1 "patname")) (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" (lmt 0 3276 3287 "varlist" (lmtk 1 1 1 "usedvars"))) (lmt #f #f #f "lst" (lmt 0 3296 3303 "varlist" (lmtk 1 1 1 "args"))))) (lmt #f #f #f "functionalexpr" (lmt #f #f #f "lst" (lmt 0 3335 3346 "varlist" (lmtk 1 1 1 "usedvars"))) (lmt #f #f #f (mt "var" "patname") (lmt 0 3365 3372 "varlist" (lmtk 1 1 1 "args")))))
    (cons (lmt #f #f #f "functionref" (lmt 0 3105 3114 "var" (lmtk 1 1 1 "patname")) (lmt #f #f #f "functionargs" (lmt 0 3130 3137 "varlist" (lmtk 1 1 1 "args")))) (lmt #f #f #f "functionref" (lmt 0 3158 3167 "var" (lmtk 1 1 1 "patname")) (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" ) (lmt #f #f #f "lst" ) (lmt 0 3198 3205 "varlist" (lmtk 1 1 1 "args"))))))
  (list 'namedanondef-xf3
    (cons (lmt #f #f #f "namedanondef-xf3" (lmt 0 2616 2623 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 2630 2644 "varlist" (lmtk 1 1 1 "closurevars"))) (lmt #f #f #f "lst" ) (lmt 0 2652 2659 "varlist" (lmtk 1 1 1 "done"))) (lmt #f #f #f "functionalexpr" (lmt #f #f #f "lst" (lmt 0 2689 2703 "varlist" (lmtk 1 1 1 "closurevars"))) (lmt #f #f #f "closure" (lmt 0 2752 2892 "term" (lmt 0 2753 2761 "name" (lmtk 1 1 1 "pattern")) (lmt 0 2769 2809 "term" (lmt 0 2770 2775 "name" (lmtk 1 1 1 "term")) (lmt 0 2777 2784 "var" (lmtk 1 1 1 "fname")) (lmt 0 2784 2801 "unreplaced" (lmt 0 2796 2800 "varlist" (lmtk 1 1 1 "r")))) (lmt 0 2809 2891 "unexpanded" (lmt 0 2821 2890 "unexpanded" (lmt 0 2833 2889 "term" (lmt 0 2834 2840 "name" (lmtk 1 1 1 "error")) (lmt 0 2842 2877 "string" (lmtk 1 1 1 "Invalid use of closure pattern '")) (lmt 0 2877 2884 "var" (lmtk 1 1 1 "fname")) (lmt 0 2884 2888 "string" (lmtk 1 1 1 "'.")))))) (lmt 0 2896 2910 "varlist" (lmtk 1 1 1 "closurevars")))))
    (cons (lmt #f #f #f "namedanondef-xf3" (lmt 0 2325 2332 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 2339 2353 "varlist" (lmtk 1 1 1 "closurevars"))) (lmt #f #f #f "lst" (lmt #f #f #f "anondefcase-xf2" (lmt #f #f #f "lst" (lmt 0 2388 2395 "varlist" (lmtk 1 1 1 "patt"))) (lmt 0 2397 2402 "var" (lmtk 1 1 1 "repl"))) (lmt 0 2404 2412 "varlist" (lmtk 1 1 1 "cases"))) (lmt 0 2414 2421 "varlist" (lmtk 1 1 1 "done"))) (lmt #f #f #f "namedanondef-xf3" (lmt 0 2446 2453 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 2460 2474 "varlist" (lmtk 1 1 1 "closurevars"))) (lmt #f #f #f "lst" (lmt 0 2483 2491 "varlist" (lmtk 1 1 1 "cases"))) (lmt 0 2517 2573 "term" (lmt 0 2518 2526 "name" (lmtk 1 1 1 "pattern")) (lmt 0 2528 2567 "term" (lmt 0 2529 2534 "name" (lmtk 1 1 1 "term")) (lmt 0 2536 2543 "var" (lmtk 1 1 1 "fname")) (lmt 0 2543 2558 "varlist" (lmtk 1 1 1 "closurevars")) (lmt 0 2558 2565 "varlist" (lmtk 1 1 1 "patt"))) (lmt 0 2567 2572 "var" (lmtk 1 1 1 "repl"))))))
  (list 'namedanondef-xf2
    (cons (lmt #f #f #f "namedanondef-xf2" (lmt 0 2160 2167 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 2174 2188 "varlist" (lmtk 1 1 1 "closurevars"))) (lmt #f #f #f "lst" (lmt 0 2197 2205 "varlist" (lmtk 1 1 1 "ready")))) (lmt #f #f #f "namedanondef-xf3" (lmt 0 2231 2238 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "flatten-lst" (lmt 0 2253 2267 "varlist" (lmtk 1 1 1 "closurevars"))) (lmt #f #f #f "lst" (lmt 0 2276 2284 "varlist" (lmtk 1 1 1 "ready")))))
    (cons (lmt #f #f #f "namedanondef-xf2" (lmt 0 1818 1825 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 1832 1846 "varlist" (lmtk 1 1 1 "closurevars"))) (lmt #f #f #f "lst" (lmt 0 1855 1863 "varlist" (lmtk 1 1 1 "ready"))) (lmt #f #f #f "anondefcase-xf" (lmt #f #f #f "functionargs-xf" (lmt 0 1902 1912 "var" (lmtk 1 1 1 "pattvars")) (lmt 0 1912 1920 "var" (lmtk 1 1 1 "funargs"))) (lmt #f #f #f "functionalexpr" (lmt 0 1940 1950 "var" (lmtk 1 1 1 "replvars")) (lmt 0 1950 1955 "var" (lmtk 1 1 1 "repl")))) (lmt 0 1958 1969 "varlist" (lmtk 1 1 1 "defcases"))) (lmt #f #f #f "namedanondef-xf2" (lmt 0 1994 2001 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 2008 2023 "varlist" (lmtk 1 1 1 "closurevars")) (lmt #f #f #f "setdiff" (lmt 0 2034 2044 "var" (lmtk 1 1 1 "replvars")) (lmt 0 2044 2053 "var" (lmtk 1 1 1 "pattvars")))) (lmt #f #f #f "lst" (lmt 0 2063 2072 "varlist" (lmtk 1 1 1 "ready")) (lmt #f #f #f "anondefcase-xf2" (lmt 0 2091 2100 "var" (lmtk 1 1 1 "funargs")) (lmt 0 2100 2105 "var" (lmtk 1 1 1 "repl")))) (lmt 0 2108 2119 "varlist" (lmtk 1 1 1 "defcases")))))
  (list 'anondef
    (cons (lmt #f #f #f "anondef" (lmt 0 1302 1313 "varlist" (lmtk 1 1 1 "defcases"))) (lmt #f #f #f "namedanondef" (lmt #f #f #f "name" "g58") (lmt 0 1356 1367 "varlist" (lmtk 1 1 1 "defcases")))))
  (list 'functionargs-xf
    (cons (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" (lmt 0 1095 1106 "varlist" (lmtk 1 1 1 "usedvars"))) (lmt #f #f #f "lst" (lmt 0 1115 1122 "varlist" (lmtk 1 1 1 "done"))) (lmt #f #f #f "functionalexpr" (lmt #f #f #f "lst" (lmt 0 1149 1156 "varlist" (lmtk 1 1 1 "vars"))) (lmt 0 1158 1162 "var" (lmtk 1 1 1 "arg"))) (lmt 0 1164 1171 "varlist" (lmtk 1 1 1 "args"))) (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" (lmt 0 1200 1212 "varlist" (lmtk 1 1 1 "usedvars")) (lmt 0 1212 1219 "varlist" (lmtk 1 1 1 "vars"))) (lmt #f #f #f "lst" (lmt 0 1228 1237 "varlist" (lmtk 1 1 1 "done")) (lmt 0 1237 1241 "var" (lmtk 1 1 1 "arg"))) (lmt 0 1243 1250 "varlist" (lmtk 1 1 1 "args")))))
  (list 'namedanondef-xf
    (cons (lmt #f #f #f "namedanondef-xf" (lmt 0 1702 1709 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 1716 1724 "varlist" (lmtk 1 1 1 "ready")))) (lmt #f #f #f "namedanondef-xf2" (lmt 0 1750 1757 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" ) (lmt #f #f #f "lst" ) (lmt 0 1769 1777 "varlist" (lmtk 1 1 1 "ready"))))
    (cons (lmt #f #f #f "namedanondef-xf" (lmt 0 1515 1522 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 1529 1537 "varlist" (lmtk 1 1 1 "ready"))) (lmt #f #f #f "defcase" (lmt 0 1550 1556 "var" (lmtk 1 1 1 "patt")) (lmt 0 1556 1561 "var" (lmtk 1 1 1 "repl"))) (lmt 0 1563 1574 "varlist" (lmtk 1 1 1 "defcases"))) (lmt #f #f #f "namedanondef-xf" (lmt 0 1596 1603 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 1610 1619 "varlist" (lmtk 1 1 1 "ready")) (lmt #f #f #f "anondefcase-xf" (lmt 0 1637 1643 "var" (lmtk 1 1 1 "patt")) (lmt 0 1643 1648 "var" (lmtk 1 1 1 "repl")))) (lmt 0 1651 1662 "varlist" (lmtk 1 1 1 "defcases")))))
  (list 'variable
    (cons (lmt #f #f #f "variable" (lmt 0 3405 3407 "var" (lmtk 1 1 1 "v"))) (lmt #f #f #f "functionalexpr" (lmt #f #f #f "lst" (lmt #f #f #f "var" (lmt 0 3444 3446 "var" (lmtk 1 1 1 "v")))) (lmt #f #f #f "var" (lmt 0 3456 3458 "var" (lmtk 1 1 1 "v"))))))
  (list 'defcase-xf
    (cons (lmt #f #f #f "defcase-xf" (lmt 0 896 903 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" (lmt 0 929 940 "varlist" (lmtk 1 1 1 "usedvars"))) (lmt #f #f #f "lst" (lmt 0 949 956 "varlist" (lmtk 1 1 1 "args")))) (lmt #f #f #f "functionalexpr" (lmt #f #f #f "lst" (lmt 0 984 988 "varlist" (lmtk 1 1 1 "v"))) (lmt 0 990 994 "var" (lmtk 1 1 1 "res")))) (lmt 0 1010 1050 "term" (lmt 0 1011 1019 "name" (lmtk 1 1 1 "pattern")) (lmt 0 1021 1045 "term" (lmt 0 1022 1027 "name" (lmtk 1 1 1 "term")) (lmt 0 1029 1036 "var" (lmtk 1 1 1 "fname")) (lmt 0 1036 1043 "varlist" (lmtk 1 1 1 "args"))) (lmt 0 1045 1049 "var" (lmtk 1 1 1 "res"))))
    (cons (lmt #f #f #f "defcase-xf" (lmt 0 759 766 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "functionargs" (lmt 0 782 789 "varlist" (lmtk 1 1 1 "args"))) (lmt 0 791 795 "var" (lmtk 1 1 1 "res"))) (lmt #f #f #f "defcase-xf" (lmt 0 812 819 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" ) (lmt #f #f #f "lst" ) (lmt 0 850 857 "varlist" (lmtk 1 1 1 "args"))) (lmt 0 859 863 "var" (lmtk 1 1 1 "res")))))
  (list 'functiondef-xf
    (cons (lmt #f #f #f "functiondef-xf" (lmt 0 530 537 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 544 552 "varlist" (lmtk 1 1 1 "ready")))) (lmt 0 558 727 "+" (lmt 0 561 570 "varlist" (lmtk 1 1 1 "ready")) (lmt 0 582 725 "term" (lmt 0 583 591 "name" (lmtk 1 1 1 "pattern")) (lmt 0 599 639 "term" (lmt 0 600 605 "name" (lmtk 1 1 1 "term")) (lmt 0 607 614 "var" (lmtk 1 1 1 "fname")) (lmt 0 614 631 "unreplaced" (lmt 0 626 630 "varlist" (lmtk 1 1 1 "r")))) (lmt 0 639 724 "unexpanded" (lmt 0 651 723 "unexpanded" (lmt 0 663 722 "term" (lmt 0 664 670 "name" (lmtk 1 1 1 "error")) (lmt 0 672 710 "string" (lmtk 1 1 1 "Invalid use of functional pattern '")) (lmt 0 710 717 "var" (lmtk 1 1 1 "fname")) (lmt 0 717 721 "string" (lmtk 1 1 1 "'."))))))))
    (cons (lmt #f #f #f "functiondef-xf" (lmt 0 342 349 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 356 364 "varlist" (lmtk 1 1 1 "ready"))) (lmt #f #f #f "defcase" (lmt 0 377 383 "var" (lmtk 1 1 1 "patt")) (lmt 0 383 388 "var" (lmtk 1 1 1 "repl"))) (lmt 0 390 401 "varlist" (lmtk 1 1 1 "defcases"))) (lmt #f #f #f "functiondef-xf" (lmt 0 422 429 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" (lmt 0 436 445 "varlist" (lmtk 1 1 1 "ready")) (lmt #f #f #f "defcase-xf" (lmt 0 459 466 "var" (lmtk 1 1 1 "fname")) (lmt 0 466 472 "var" (lmtk 1 1 1 "patt")) (lmt 0 472 477 "var" (lmtk 1 1 1 "repl")))) (lmt 0 480 491 "varlist" (lmtk 1 1 1 "defcases")))))
  (list 'parens
    (cons (lmt #f #f #f "parens" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "+" (lmt #f #f #f "tok" (lmt #f #f #f "string" (lmtk 1 1 1 "("))) (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "tok" (lmt #f #f #f "string" (lmtk 1 1 1 ")"))))))
  (list 'setdiff
    (cons (lmt #f #f #f "setdiff" (lmt #f #f #f "lst" (lmt 0 4014 4022 "varlist" (lmtk 1 1 1 "elems"))) (lmt #f #f #f "lst" (lmt 0 4031 4037 "var" (lmtk 1 1 1 "elem")) (lmt 0 4037 4046 "varlist" (lmtk 1 1 1 "elems2")))) (lmt #f #f #f "setdiff" (lmt #f #f #f "remove-elem" (lmt 0 4078 4084 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" (lmt 0 4091 4099 "varlist" (lmtk 1 1 1 "elems")))) (lmt #f #f #f "lst" (lmt 0 4109 4118 "varlist" (lmtk 1 1 1 "elems2")))))
    (cons (lmt #f #f #f "setdiff" (lmt #f #f #f "lst" (lmt 0 3942 3950 "varlist" (lmtk 1 1 1 "elems"))) (lmt #f #f #f "lst" )) (lmt #f #f #f "lst" (lmt 0 3969 3977 "varlist" (lmtk 1 1 1 "elems")))))
  (list 'functiondef
    (cons (lmt #f #f #f "functiondef" (lmt 0 237 248 "var" (lmtk 1 1 1 "fname")) (lmt 0 248 259 "varlist" (lmtk 1 1 1 "defcases"))) (lmt #f #f #f "functiondef-xf" (lmt 0 281 288 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" ) (lmt 0 294 305 "varlist" (lmtk 1 1 1 "defcases")))))
  (list '&
    (cons (lmt #f #f #f "&" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "!" (lmt #f #f #f "!" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))))))
  (list 'flatten-lst
    (cons (lmt #f #f #f "flatten-lst" (lmt #f #f #f "lst" )) (lmt #f #f #f "lst" ))
    (cons (lmt #f #f #f "flatten-lst" (lmt #f #f #f "lst" (lmt 0 4817 4824 "varlist" (lmtk 1 1 1 "lst1")))) (lmt #f #f #f "lst" (lmt 0 4837 4844 "varlist" (lmtk 1 1 1 "lst1"))))
    (cons (lmt #f #f #f "flatten-lst" (lmt #f #f #f "lst" (lmt 0 4693 4700 "varlist" (lmtk 1 1 1 "lst1"))) (lmt #f #f #f "lst" (lmt 0 4709 4716 "varlist" (lmtk 1 1 1 "lst2"))) (lmt 0 4718 4725 "varlist" (lmtk 1 1 1 "rest"))) (lmt #f #f #f "flatten-lst" (lmt #f #f #f "lst" (lmt 0 4752 4760 "varlist" (lmtk 1 1 1 "lst1")) (lmt 0 4760 4767 "varlist" (lmtk 1 1 1 "lst2"))) (lmt 0 4769 4776 "varlist" (lmtk 1 1 1 "rest")))))
  (list 'namedanondef
    (cons (lmt #f #f #f "namedanondef" (lmt #f #f #f "name" (lmt 0 1411 1417 "var" (lmtk 1 1 1 "fname"))) (lmt 0 1419 1430 "varlist" (lmtk 1 1 1 "defcases"))) (lmt #f #f #f "namedanondef-xf" (lmt 0 1453 1460 "var" (lmtk 1 1 1 "fname")) (lmt #f #f #f "lst" ) (lmt 0 1466 1477 "varlist" (lmtk 1 1 1 "defcases")))))
  (list '%*%
    (cons (lmt #f #f #f "%*%" (lmt #f #f #f "var" (lmtk 1 1 1 "n")) (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "rule" (lmt #f #f #f "var" (lmtk 1 1 1 "n")) (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "var" (lmtk 1 1 1 "n"))) (lmt #f #f #f "null" )))))
  (list '?
    (cons (lmt #f #f #f "?" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "/" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "null" ))))
  (list 'anondefcase-xf
    (cons (lmt #f #f #f "anondefcase-xf" (lmt #f #f #f "functionargs" (lmt 0 2964 2971 "varlist" (lmtk 1 1 1 "args"))) (lmt 0 2973 2978 "var" (lmtk 1 1 1 "repl"))) (lmt #f #f #f "anondefcase-xf" (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" ) (lmt #f #f #f "lst" ) (lmt 0 3030 3037 "varlist" (lmtk 1 1 1 "args"))) (lmt 0 3039 3044 "var" (lmtk 1 1 1 "repl")))))
  (list 'listvariable
    (cons (lmt #f #f #f "listvariable" (lmt 0 3495 3497 "var" (lmtk 1 1 1 "v"))) (lmt #f #f #f "functionalexpr" (lmt #f #f #f "lst" (lmt #f #f #f "varlist" (lmt 0 3538 3540 "var" (lmtk 1 1 1 "v")))) (lmt #f #f #f "varlist" (lmt 0 3554 3556 "var" (lmtk 1 1 1 "v"))))))
  (list 'varfunctionref
    (cons (lmt #f #f #f "varfunctionref" (lmt 0 3737 3746 "var" (lmtk 1 1 1 "varname")) (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" (lmt 0 3772 3783 "varlist" (lmtk 1 1 1 "usedvars"))) (lmt #f #f #f "lst" (lmt 0 3792 3799 "varlist" (lmtk 1 1 1 "args"))))) (lmt #f #f #f "functionalexpr" (lmt #f #f #f "lst" (lmt 0 3831 3842 "varlist" (lmtk 1 1 1 "usedvars"))) (lmt #f #f #f (mt "var" (mt "var" "varname")) (lmt 0 3869 3876 "varlist" (lmtk 1 1 1 "args")))))
    (cons (lmt #f #f #f "varfunctionref" (lmt 0 3596 3605 "var" (lmtk 1 1 1 "varname")) (lmt #f #f #f "functionargs" (lmt 0 3621 3628 "varlist" (lmtk 1 1 1 "args")))) (lmt #f #f #f "varfunctionref" (lmt 0 3651 3660 "var" (lmtk 1 1 1 "varname")) (lmt #f #f #f "functionargs-xf" (lmt #f #f #f "lst" ) (lmt #f #f #f "lst" ) (lmt 0 3691 3698 "varlist" (lmtk 1 1 1 "args"))))))
  (list 'remove-elem
    (cons (lmt #f #f #f "remove-elem" (lmt 0 4179 4185 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" (lmt 0 4192 4200 "varlist" (lmtk 1 1 1 "elems")))) (lmt #f #f #f "remove-elem-xf" (lmt #f #f #f "lst" ) (lmt 0 4230 4236 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" (lmt 0 4243 4251 "varlist" (lmtk 1 1 1 "elems"))))))
  (list 'remove-elem-xf
    (cons (lmt #f #f #f "remove-elem-xf" (lmt #f #f #f "lst" (lmt 0 4588 4595 "varlist" (lmtk 1 1 1 "done"))) (lmt 0 4597 4603 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" )) (lmt #f #f #f "lst" (lmt 0 4620 4627 "varlist" (lmtk 1 1 1 "done"))))
    (cons (lmt #f #f #f "remove-elem-xf" (lmt #f #f #f "lst" (lmt 0 4438 4445 "varlist" (lmtk 1 1 1 "done"))) (lmt 0 4447 4453 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" (lmt 0 4460 4467 "var" (lmtk 1 1 1 "elem2")) (lmt 0 4467 4475 "varlist" (lmtk 1 1 1 "elems")))) (lmt #f #f #f "remove-elem-xf" (lmt #f #f #f "lst" (lmt 0 4506 4514 "varlist" (lmtk 1 1 1 "done")) (lmt 0 4514 4520 "var" (lmtk 1 1 1 "elem2"))) (lmt 0 4522 4528 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" (lmt 0 4535 4543 "varlist" (lmtk 1 1 1 "elems")))))
    (cons (lmt #f #f #f "remove-elem-xf" (lmt #f #f #f "lst" (lmt 0 4296 4303 "varlist" (lmtk 1 1 1 "done"))) (lmt 0 4305 4311 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" (lmt 0 4318 4324 "var" (lmtk 1 1 1 "elem")) (lmt 0 4324 4332 "varlist" (lmtk 1 1 1 "elems")))) (lmt #f #f #f "remove-elem-xf" (lmt #f #f #f "lst" (lmt 0 4363 4370 "varlist" (lmtk 1 1 1 "done"))) (lmt 0 4372 4378 "var" (lmtk 1 1 1 "elem")) (lmt #f #f #f "lst" (lmt 0 4385 4393 "varlist" (lmtk 1 1 1 "elems"))))))
  (list 'tok
    (cons (lmt #f #f #f "tok" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "+" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))))
  (list 'sym
    (cons (lmt #f #f #f "sym" (lmt #f #f #f "var" (lmtk 1 1 1 "c"))) (lmt #f #f #f "tok" (lmt #f #f #f "+" (lmt #f #f #f "var" (lmtk 1 1 1 "c")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))))))))
(list (cons 'endoffile (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "anychar"))))
  (cons 'null (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))
  (cons 'declaration (lmt #f #f #f ">" (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr"))))
  (cons 'namechars (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "namechars"))) (lmt #f #f #f "null" )))
  (cons 'newline (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "returnchar")) (lmt #f #f #f "name" (lmtk 1 1 1 "linefeedchar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "returnchar")) (lmt #f #f #f "name" (lmtk 1 1 1 "linefeedchar"))))
  (cons 'name (lmt #f #f #f "//" (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "var")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "'")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "nameliteral")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "varlist")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "'''")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "nameliteral")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "nameliteral")))))
  (cons 'whitespace (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "/" (lmt #f #f #f "name" (lmtk 1 1 1 "whitespacechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "linecomment"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))) (lmt #f #f #f "null" )))
  (cons 'nameliteral (lmt #f #f #f "+" (lmt #f #f #f "<" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "namechars")))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))
  (cons 'start (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "declarations")) (lmt #f #f #f "name" (lmtk 1 1 1 "endoffile"))))
  (cons 'linecomment (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 ";")) (lmt #f #f #f "name" (lmtk 1 1 1 "commentchars")) (lmt #f #f #f "name" (lmtk 1 1 1 "newline"))))
  (cons 'namechar (lmt #f #f #f "/" (lmt #f #f #f "name" (lmtk 1 1 1 "letterchar")) (lmt #f #f #f "name" (lmtk 1 1 1 "digitchar")) (lmt #f #f #f "string" (lmtk 1 1 1 "$")) (lmt #f #f #f "string" (lmtk 1 1 1 "<")) (lmt #f #f #f "string" (lmtk 1 1 1 "=")) (lmt #f #f #f "string" (lmtk 1 1 1 ">")) (lmt #f #f #f "string" (lmtk 1 1 1 "^")) (lmt #f #f #f "string" (lmtk 1 1 1 "`")) (lmt #f #f #f "string" (lmtk 1 1 1 "|")) (lmt #f #f #f "string" (lmtk 1 1 1 "~")) (lmt #f #f #f "string" (lmtk 1 1 1 "_")) (lmt #f #f #f "string" (lmtk 1 1 1 "!")) (lmt #f #f #f "string" (lmtk 1 1 1 "%")) (lmt #f #f #f "string" (lmtk 1 1 1 "&")) (lmt #f #f #f "string" (lmtk 1 1 1 "*")) (lmt #f #f #f "string" (lmtk 1 1 1 "-")) (lmt #f #f #f "string" (lmtk 1 1 1 "+")) (lmt #f #f #f "string" (lmtk 1 1 1 "?")) (lmt #f #f #f "string" (lmtk 1 1 1 ":")) (lmt #f #f #f "string" (lmtk 1 1 1 "/")) (lmt #f #f #f "string" (lmtk 1 1 1 "@")) (lmt #f #f #f "string" (lmtk 1 1 1 "."))))
  (cons 'declarations (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "declaration")) (lmt #f #f #f "name" (lmtk 1 1 1 "declarations"))) (lmt #f #f #f "null" )))
  (cons 'commentchars (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "newline"))) (lmt #f #f #f "name" (lmtk 1 1 1 "anychar")) (lmt #f #f #f "name" (lmtk 1 1 1 "commentchars"))) (lmt #f #f #f "null" )))
  (cons 'stringchars (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "anychar")) (lmt #f #f #f "name" (lmtk 1 1 1 "stringchars"))) (lmt #f #f #f "null" )))
  (cons 'sexpr (lmt #f #f #f "//" (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "term")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "[")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 ":")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs"))) (lmt #f #f #f "null" )) (lmt #f #f #f "string" (lmtk 1 1 1 "]")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unreplaced")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "unreplaced")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "?")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "?")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "parens")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "parens")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "*")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "*")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "null")) (lmt #f #f #f "name" (lmtk 1 1 1 "null"))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "^<")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "^<")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "^=")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "^=")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "^>")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "^>")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "$")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "$")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 ">")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ">")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "@")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "@")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "<")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "<")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "!")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "!")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "/")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "/")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "//")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "//")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "+")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "+")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "term")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "term")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "import")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "import")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "stringliteral")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "newname")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "newname")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "insert")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "insert")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "rule")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "rule")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "pattern")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "syntaxpattern")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr"))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr"))) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "unexpanded")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "string")) (lmt #f #f #f "name" (lmtk 1 1 1 "stringliteral"))) (lmt #f #f #f "name" (lmtk 1 1 1 "name")) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "%*%")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "%*%")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "tok")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "tok")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "sym")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "sym")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "&")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "&")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "pattern")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "(")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "string" (lmtk 1 1 1 "termpattern")) (lmt #f #f #f "!" (lmt #f #f #f "name" (lmtk 1 1 1 "namechar"))) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "string" (lmtk 1 1 1 ")")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")))) (lmt #f #f #f "@" (lmt #f #f #f "string" (lmtk 1 1 1 "token")) (lmt #f #f #f "+" (lmt #f #f #f "string" (lmtk 1 1 1 "#")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace")) (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "<" (lmt #f #f #f "name" (lmtk 1 1 1 "stringchars"))) (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))))
  (cons 'stringliteral (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "<" (lmt #f #f #f "name" (lmtk 1 1 1 "stringchars"))) (lmt #f #f #f "name" (lmtk 1 1 1 "doublequotechar")) (lmt #f #f #f "name" (lmtk 1 1 1 "whitespace"))))
  (cons 'sexprs (lmt #f #f #f "/" (lmt #f #f #f "+" (lmt #f #f #f "name" (lmtk 1 1 1 "sexpr")) (lmt #f #f #f "name" (lmtk 1 1 1 "sexprs"))) (lmt #f #f #f "null" )))))