AbstractMethodDeclaration:
        MethodHeader ";"
AdditiveExpression:
        AdditiveExpression "-" MultiplicativeExpression
AdditiveExpression:
        AdditiveExpression "+" MultiplicativeExpression
AdditiveExpression:
        MultiplicativeExpression
AndExpression:
        AndExpression "&" EqualityExpression
AndExpression:
        EqualityExpression
ArgumentList:
        ArgumentList "," Expression
ArgumentList:
        Expression
ArrayAccess:
        Name "[" Expression "]"
ArrayAccess:
        PrimaryNoNewArray "[" Expression "]"
ArrayCreationExpression:
        "new" ClassOrInterfaceType DimExprs Dims?
ArrayCreationExpression:
        "new" PrimitiveType DimExprs Dims?
ArrayInitializer:
        "{" VariableInitializers? ","? "}"
ArrayType:
        ArrayType "[" "]"
ArrayType:
        Name "[" "]"
ArrayType:
        PrimitiveType "[" "]"
Assignment:
        LeftHandSide AssignmentOperator AssignmentExpression
AssignmentExpression:
        Assignment
AssignmentExpression:
        ConditionalExpression
AssignmentOperator:
        "-="
AssignmentOperator:
        "*="
AssignmentOperator:
        "/="
AssignmentOperator:
        "&="
AssignmentOperator:
        "%="
AssignmentOperator:
        "^="
AssignmentOperator:
        "+="
AssignmentOperator:
        "<<="
AssignmentOperator:
        "="
AssignmentOperator:
        ">>="
AssignmentOperator:
        ">>>="
AssignmentOperator:
        "|="
Block:
        "{" BlockStatements? "}"
BlockStatement:
        LocalVariableDeclarationStatement
BlockStatement:
        Statement
BlockStatements:
        BlockStatement
BlockStatements:
        BlockStatements BlockStatement
BreakStatement:
        "break" Identifier? ";"
CastExpression:
        "(" Expression ")" UnaryExpressionNotPlusMinus
CastExpression:
        "(" Name Dims ")" UnaryExpressionNotPlusMinus
CastExpression:
        "(" PrimitiveType Dims? ")" UnaryExpression
CatchClause:
        "catch" "(" FormalParameter ")" Block
Catches:
        CatchClause
Catches:
        Catches CatchClause
ClassBody:
        "{" ClassBodyDeclarations? "}"
ClassBodyDeclaration:
        ClassMemberDeclaration
ClassBodyDeclaration:
        ConstructorDeclaration
ClassBodyDeclaration:
        StaticInitializer
ClassBodyDeclarations:
        ClassBodyDeclaration
ClassBodyDeclarations:
        ClassBodyDeclarations ClassBodyDeclaration
ClassDeclaration:
        Modifiers? "class" Identifier Super? Interfaces? ClassBody
ClassInstanceCreationExpression:
        "new" ClassType "(" ArgumentList? ")"
ClassMemberDeclaration:
        FieldDeclaration
ClassMemberDeclaration:
        MethodDeclaration
ClassOrInterfaceType:
        Name
ClassType:
        ClassOrInterfaceType
ClassTypeList:
        ClassType
ClassTypeList:
        ClassTypeList "," ClassType
CompilationUnit:
        PackageDeclaration? ImportDeclarations? TypeDeclarations?
ConditionalAndExpression:
        ConditionalAndExpression "&&" InclusiveOrExpression
ConditionalAndExpression:
        InclusiveOrExpression
ConditionalExpression:
        ConditionalOrExpression
ConditionalExpression:
        ConditionalOrExpression "?" Expression ":" ConditionalExpression
ConditionalOrExpression:
        ConditionalAndExpression
ConditionalOrExpression:
        ConditionalOrExpression "||" ConditionalAndExpression
ConstantDeclaration:
        FieldDeclaration
ConstantExpression:
        Expression
ConstructorBody:
        "{" ExplicitConstructorInvocation? BlockStatements? "}"
ConstructorDeclaration:
        Modifiers? ConstructorDeclarator Throws? ConstructorBody
ConstructorDeclarator:
        SimpleName "(" FormalParameterList? ")"
ContinueStatement:
        "continue" Identifier? ";"
DimExpr:
        "[" Expression "]"
DimExprs:
        DimExpr
DimExprs:
        DimExprs DimExpr
Dims:
        "[" "]"
Dims:
        Dims "[" "]"
DoStatement:
        "do" Statement "while" "(" Expression ")" ";"
EmptyStatement:
        ";"
EqualityExpression:
        EqualityExpression "!=" RelationalExpression
EqualityExpression:
        EqualityExpression "==" RelationalExpression
EqualityExpression:
        RelationalExpression
ExclusiveOrExpression:
        AndExpression
ExclusiveOrExpression:
        ExclusiveOrExpression "^" AndExpression
ExplicitConstructorInvocation:
        "super" "(" ArgumentList? ")" ";"
ExplicitConstructorInvocation:
        "this" "(" ArgumentList? ")" ";"
Expression:
        AssignmentExpression
ExpressionStatement:
        StatementExpression ";"
ExtendsInterfaces:
        "extends" InterfaceType
ExtendsInterfaces:
        ExtendsInterfaces "," InterfaceType
FieldAccess:
        "super" "." Identifier
FieldAccess:
        Primary "." Identifier
FieldDeclaration:
        Modifiers? Type VariableDeclarators ";"
Finally:
        "finally" Block
FloatingPointType:
        "double"
FloatingPointType:
        "float"
ForInit:
        LocalVariableDeclaration
ForInit:
        StatementExpressionList
FormalParameter:
        Type VariableDeclaratorId
FormalParameterList:
        FormalParameter
FormalParameterList:
        FormalParameterList "," FormalParameter
ForStatement:
        "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" Statement
ForStatementNoShortIf:
        "for" "(" ForInit? ";" Expression? ";" ForUpdate? ")" StatementNoShortIf
ForUpdate:
        StatementExpressionList
IfThenElseStatement:
        "if" "(" Expression ")" StatementNoShortIf "else" Statement
IfThenElseStatementNoShortIf:
        "if" "(" Expression ")" StatementNoShortIf "else" StatementNoShortIf
IfThenStatement:
        "if" "(" Expression ")" Statement
ImportDeclaration:
        SingleTypeImportDeclaration
ImportDeclaration:
        TypeImportOnDemandDeclaration
ImportDeclarations:
        ImportDeclaration
ImportDeclarations:
        ImportDeclarations ImportDeclaration
InclusiveOrExpression:
        ExclusiveOrExpression
InclusiveOrExpression:
        InclusiveOrExpression "|" ExclusiveOrExpression
IntegralType:
        "byte"
IntegralType:
        "char"
IntegralType:
        "int"
IntegralType:
        "long"
IntegralType:
        "short"
InterfaceBody:
        "{" InterfaceMemberDeclarations? "}"
InterfaceDeclaration:
        Modifiers? "interface" Identifier ExtendsInterfaces? InterfaceBody
InterfaceMemberDeclaration:
        AbstractMethodDeclaration
InterfaceMemberDeclaration:
        ConstantDeclaration
InterfaceMemberDeclarations:
        InterfaceMemberDeclaration
InterfaceMemberDeclarations:
        InterfaceMemberDeclarations InterfaceMemberDeclaration
Interfaces:
        "implements" InterfaceTypeList
InterfaceType:
        ClassOrInterfaceType
InterfaceTypeList:
        InterfaceType
InterfaceTypeList:
        InterfaceTypeList "," InterfaceType
LabeledStatement:
        Identifier ":" Statement
LabeledStatementNoShortIf:
        Identifier ":" StatementNoShortIf
LeftHandSide:
        ArrayAccess
LeftHandSide:
        FieldAccess
LeftHandSide:
        Name
Literal:
        BooleanLiteral
Literal:
        CharacterLiteral
Literal:
        FloatingPointLiteral
Literal:
        IntegerLiteral
Literal:
        NullLiteral
Literal:
        StringLiteral
LocalVariableDeclaration:
        Type VariableDeclarators
LocalVariableDeclarationStatement:
        LocalVariableDeclaration ";"
MethodBody:
        ";"
MethodBody:
        Block
MethodDeclaration:
        MethodHeader MethodBody
MethodDeclarator:
        Identifier "(" FormalParameterList? ")"
MethodDeclarator:
        MethodDeclarator "[" "]"
MethodHeader:
        Modifiers? "void" MethodDeclarator Throws?
MethodHeader:
        Modifiers? Type MethodDeclarator Throws?
MethodInvocation:
        "super" "." Identifier "(" ArgumentList? ")"
MethodInvocation:
        Name "(" ArgumentList? ")"
MethodInvocation:
        Primary "." Identifier "(" ArgumentList? ")"
Modifier:
        "abstract"
Modifier:
        "final"
Modifier:
        "native"
Modifier:
        "private"
Modifier:
        "protected"
Modifier:
        "public"
Modifier:
        "static"
Modifier:
        "synchronized"
Modifier:
        "transient"
Modifier:
        "volatile"
Modifiers:
        Modifier
Modifiers:
        Modifiers Modifier
MultiplicativeExpression:
        MultiplicativeExpression "*" UnaryExpression
MultiplicativeExpression:
        MultiplicativeExpression "/" UnaryExpression
MultiplicativeExpression:
        MultiplicativeExpression "%" UnaryExpression
MultiplicativeExpression:
        UnaryExpression
Name:
        QualifiedName
Name:
        SimpleName
NumericType:
        FloatingPointType
NumericType:
        IntegralType
PackageDeclaration:
        "package" Name ";"
PostDecrementExpression:
        PostfixExpression "--"
PostfixExpression:
        Name
PostfixExpression:
        PostDecrementExpression
PostfixExpression:
        PostIncrementExpression
PostfixExpression:
        Primary
PostIncrementExpression:
        PostfixExpression "++"
PreDecrementExpression:
        "--" UnaryExpression
PreIncrementExpression:
        "++" UnaryExpression
Primary:
        ArrayCreationExpression
Primary:
        PrimaryNoNewArray
PrimaryNoNewArray:
        "(" Expression ")"
PrimaryNoNewArray:
        "this"
PrimaryNoNewArray:
        ArrayAccess
PrimaryNoNewArray:
        ClassInstanceCreationExpression
PrimaryNoNewArray:
        FieldAccess
PrimaryNoNewArray:
        Literal
PrimaryNoNewArray:
        MethodInvocation
PrimitiveType:
        "boolean"
PrimitiveType:
        NumericType
QualifiedName:
        Name "." Identifier
ReferenceType:
        ArrayType
ReferenceType:
        ClassOrInterfaceType
RelationalExpression:
        RelationalExpression "<" ShiftExpression
RelationalExpression:
        RelationalExpression "<=" ShiftExpression
RelationalExpression:
        RelationalExpression ">" ShiftExpression
RelationalExpression:
        RelationalExpression ">=" ShiftExpression
RelationalExpression:
        RelationalExpression "instanceof" ReferenceType
RelationalExpression:
        ShiftExpression
ReturnStatement:
        "return" Expression? ";"
ShiftExpression:
        AdditiveExpression
ShiftExpression:
        ShiftExpression "<<" AdditiveExpression
ShiftExpression:
        ShiftExpression ">>" AdditiveExpression
ShiftExpression:
        ShiftExpression ">>>" AdditiveExpression
SimpleName:
        Identifier
SingleTypeImportDeclaration:
        "import" Name ";"
Statement:
        ForStatement
Statement:
        IfThenElseStatement
Statement:
        IfThenStatement
Statement:
        LabeledStatement
Statement:
        StatementWithoutTrailingSubstatement
Statement:
        WhileStatement
StatementExpression:
        Assignment
StatementExpression:
        ClassInstanceCreationExpression
StatementExpression:
        MethodInvocation
StatementExpression:
        PostDecrementExpression
StatementExpression:
        PostIncrementExpression
StatementExpression:
        PreDecrementExpression
StatementExpression:
        PreIncrementExpression
StatementExpressionList:
        StatementExpression
StatementExpressionList:
        StatementExpressionList "," StatementExpression
StatementNoShortIf:
        ForStatementNoShortIf
StatementNoShortIf:
        IfThenElseStatementNoShortIf
StatementNoShortIf:
        LabeledStatementNoShortIf
StatementNoShortIf:
        StatementWithoutTrailingSubstatement
StatementNoShortIf:
        WhileStatementNoShortIf
StatementWithoutTrailingSubstatement:
        Block
StatementWithoutTrailingSubstatement:
        BreakStatement
StatementWithoutTrailingSubstatement:
        ContinueStatement
StatementWithoutTrailingSubstatement:
        DoStatement
StatementWithoutTrailingSubstatement:
        EmptyStatement
StatementWithoutTrailingSubstatement:
        ExpressionStatement
StatementWithoutTrailingSubstatement:
        ReturnStatement
StatementWithoutTrailingSubstatement:
        SwitchStatement
StatementWithoutTrailingSubstatement:
        SynchronizedStatement
StatementWithoutTrailingSubstatement:
        ThrowStatement
StatementWithoutTrailingSubstatement:
        TryStatement
StaticInitializer:
        "static" Block
Super:
        "extends" ClassType
SwitchBlock:
        "{" SwitchBlockStatementGroups? SwitchLabels? "}"
SwitchBlockStatementGroup:
        SwitchLabels BlockStatements
SwitchBlockStatementGroups:
        SwitchBlockStatementGroup
SwitchBlockStatementGroups:
        SwitchBlockStatementGroups SwitchBlockStatementGroup
SwitchLabel:
        "case" ConstantExpression ":"
SwitchLabel:
        "default" ":"
SwitchLabels:
        SwitchLabel
SwitchLabels:
        SwitchLabels SwitchLabel
SwitchStatement:
        "switch" "(" Expression ")" SwitchBlock
SynchronizedStatement:
        "synchronized" "(" Expression ")" Block
Throws:
        "throws" ClassTypeList
ThrowStatement:
        "throw" Expression ";"
TryStatement:
        "try" Block Catches
TryStatement:
        "try" Block Catches? Finally
Type:
        PrimitiveType
Type:
        ReferenceType
TypeDeclaration:
        ";"
TypeDeclaration:
        ClassDeclaration
TypeDeclaration:
        InterfaceDeclaration
TypeDeclarations:
        TypeDeclaration
TypeDeclarations:
        TypeDeclarations TypeDeclaration
TypeImportOnDemandDeclaration:
        "import" Name "." "*" ";"
UnaryExpression:
        "-" UnaryExpression
UnaryExpression:
        "+" UnaryExpression
UnaryExpression:
        PreDecrementExpression
UnaryExpression:
        PreIncrementExpression
UnaryExpression:
        UnaryExpressionNotPlusMinus
UnaryExpressionNotPlusMinus:
        "!" UnaryExpression
UnaryExpressionNotPlusMinus:
        "~" UnaryExpression
UnaryExpressionNotPlusMinus:
        CastExpression
UnaryExpressionNotPlusMinus:
        PostfixExpression
VariableDeclarator:
        VariableDeclaratorId
VariableDeclarator:
        VariableDeclaratorId "=" VariableInitializer
VariableDeclaratorId:
        Identifier
VariableDeclaratorId:
        VariableDeclaratorId "[" "]"
VariableDeclarators:
        VariableDeclarator
VariableDeclarators:
        VariableDeclarators "," VariableDeclarator
VariableInitializer:
        ArrayInitializer
VariableInitializer:
        Expression
VariableInitializers:
        VariableInitializer
VariableInitializers:
        VariableInitializers "," VariableInitializer
WhileStatement:
        "while" "(" Expression ")" Statement
WhileStatementNoShortIf:
        "while" "(" Expression ")" StatementNoShortIf
