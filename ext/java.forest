
; Syntax definition for java lang spec 1.0

(extend "core.forest")

(extend "standard.patterns.forest")
(extend "standard.rules.forest")

(extend "functional.patterns.forest")
(extend "functional.rules.forest")
(include "functional.forest")

; start parsing here
(rule start (+ whitespace CompilationUnit endoffile))

(rule endoffile (! anychar))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; 3.4 Line Terminators
(rule newline (/ (+ returnchar linefeedchar) returnchar linefeedchar))

;; 3.5 Input Elements and Tokens

;; 3.6 White Space
; (rule whitespacechar (/ spacechar tabchar formfeedchar newline))

(rule whitespace (/ (+ (/ whitespacechar Comment) whitespace) ()))

;; 3.7 Comments
(rule Comment (// TraditionalComment EndOfLineComment DocumentationComment))

(rule TraditionalComment (+ "/*" (/ (& "*/") (! "*")) CommentTail))

(rule DocumentationComment (+ "/**" CommentTail))

(rule CommentTail ($ (+ (* (+ (! "*/") anychar)) "*/") "unclosed comment"))

(rule EndOfLineComment (+ "//" (* (+ (! newline) anychar)) newline))

;; 3.8 Identifiers
(rule Identifier (tok (< (+ (! keyword) (/ letterchar "_" "$") (* letterordigit)))))

(rule letterordigit (/ letterchar digitchar "_" "$"))

;; 3.9 Keywords

;; 3.10 Literals
(rule Literal (/ FloatingPointLiteral
                 IntegerLiteral
                 CharacterLiteral
                 StringLiteral
                 BooleanLiteral
                 NullLiteral))

;;; 3.10.1 Integer Literals
(rule IntegerLiteral (@ "integer" (tok (< (/ (+ HexNumeral (? IntegerTypeSuffix))
                                             (+ OctalNumeral (? IntegerTypeSuffix))
                                             (+ DecimalNumeral (? IntegerTypeSuffix)))))))


(rule IntegerTypeSuffix (/ "l" "L"))

(rule DecimalNumeral (+ (! "0") Digits))

(rule Digits (*1 digitchar))

(rule HexNumeral (+ (/ "0x" "0X") (*1 hexdigitchar)))

(rule OctalNumeral (+ "0" (* OctalDigit)))

(rule OctalDigit (/ "0" "1" "2" "3" "4" "5" "6" "7"))


;;; 3.10.2 Floating-Point Literals
(rule FloatingPointLiteral (@ "floating-point" (tok (< (/ (+ "." Digits (? ExponentPart) (? FloatTypeSuffix))
                                                          (+ Digits "." (? Digits) (? ExponentPart) (? FloatTypeSuffix))
                                                          (+ Digits (? ExponentPart) FloatTypeSuffix)
                                                          (+ Digits ExponentPart (? FloatTypeSuffix)))))))

(rule ExponentPart (+ (/ "e" "E") SignedInteger))

(rule SignedInteger (+ (? (/ "+" "-")) Digits))

(rule FloatTypeSuffix (/ "f" "F" "d" "D"))

;;; 3.10.3 Boolean Literals
(rule BooleanLiteral (/ (@: "true") (@: "false")))

;;; 3.10.4 Character Literals
(rule CharacterLiteral (@ "char" (tok (+ singlequotechar (! singlequotechar) (< Character) singlequotechar))))

(rule Character (/ (+ backslashchar (/ "b" "t" "n" "f" "r" doublequotechar singlequotechar backslashchar)) 
                   (+ backslashchar "u" ($ (+ hexdigitchar hexdigitchar hexdigitchar hexdigitchar) "Illegal unicode escape"))
                   (+ backslashchar ($ (/ (+ (/ "0" "1" "2" "3") OctalDigit OctalDigit) (+ OctalDigit OctalDigit) OctalDigit) "Illegal octal escape")) 
                   (+ (! backslashchar) (! returnchar) (! linefeedchar) asciichar)))

;;; 3.10.5 String Literals
(rule StringLiteral (@ "string" (tok (+ doublequotechar (< (* (+ (! doublequotechar) Character))) doublequotechar))))

;;; 3.10.6 Escape Sequences for Character and String Literals

;;; 3.10.7 The Null Literal
(rule NullLiteral (@: "null"))

;;; 3.11 Separators
(rule dot (tok "."))

(rule semicolon (tok ";"))

(rule semicolon$ ($ semicolon "';' expected"))

(rule comma (tok ","))

(rule colon (tok ":"))

;;; 3.12 Operators
(rule operatorchar (/ "=" ">" "<" "!" "~" "?" ":" "#" "%" "^" "&" "*" "+" "-" "|" "/"))

(rule HexadecimalFloatingPointLiteral (+ HexSignificand BinaryExponent (? FloatTypeSuffix)))

(rule HexSignificand (+ HexNumeral (? ".") (* hexdigitchar)))

(rule BinaryExponent (+ (/ "p" "P") SignedInteger))

;; 4.1 The Kinds of Types and Values
(rule Type (/ ReferenceType PrimitiveType))

;; 4.2 Primitive Types and Values
(rule PrimitiveType (// NumericType (@: "boolean")))

(rule NumericType (// IntegralType FloatingPointType))

(rule IntegralType (// (@: "byte") (@: "short") (@: "int") (@: "long") (@: "char")))

(rule FloatingPointType (// (@: "float") (@: "double")))

;; 4.3 Reference Types and Values
(rule ReferenceType (/ (@ "array-type" (+ Type (brackets ()))) ClassOrInterfaceType))

(rule ClassOrInterfaceType TypeName)

;; 6.5 Determining the Meaning of a Name
(rule PackageName (@ "package-name" (seq Identifier dot)))

(rule PackagePrefix (@ "package-name" (+ Identifier (* (+ dot Identifier (& (+ dot Identifier)))))))

(rule TypeName (@ "type-name" (/ (+ PackagePrefix dot Identifier) Identifier)))

(rule ExpressionName (@ "expression-name" (/ (+ AmbiguousName dot Identifier) Identifier)))

(rule MethodName (/ (+ AmbiguousName dot Identifier) 
                    (+ Identifier)))

;(rule AmbiguousName (@ "ambiguous-name" (+ Identifier (* (+ dot Identifier (& (+ dot Identifier)))))))
(rule AmbiguousName (@ "ambiguous-name" (+ (/ (+ AmbiguousName dot Identifier)
                                            Identifier) (& (+ dot Identifier)))))


;; 7.3 Compilation Units
(rule CompilationUnit (+ (> PackageDeclaration) (* (> LanguageDeclaration)) (* (> extendDeclaration)) (* (> TypeDeclaration))))

(rule LanguageDeclaration (@$: "language" StringLiteral semicolon$))
(termpattern [language : [string : 'v]] (unexpanded [extend : 'v]))


(rule PackageDeclaration (/ (@$: "package" PackageName semicolon$) (@ "package" ())))

;; 7.5 extend Declarations
(rule extendDeclaration (+ (@$: "import" (/ (+ PackageName dot (@ "all" (tok "*")))
                                            (+ TypeName)) semicolon$)))

;;; 7.6 Type Declarations
(rule TypeDeclaration (// ClassDeclaration InterfaceDeclaration semicolon))

;; 8.1 Class Declaration
(rule ClassDeclaration (@.$: (@ "modifiers" (* ClassModifier)) "class" Identifier Super (? Interfaces) ClassBody))

;;; 8.1.2 Class Modifiers
(rule ClassModifier (// (@: "public") (@: "abstract") (@: "final")))

;;; 8.1.3 Superclasses and Subclasses
(rule Super (/ (@$: "extends" ClassOrInterfaceType) (@ "extends" ())))

;;; 8.1.4 Superinterfaces
(rule Interfaces (@$: "implements" (list ClassOrInterfaceType)))

;;; 8.1.5 Class Body and Member Declarations
(rule ClassBody (body-braces$ (* ClassBodyDeclaration)))

(rule ClassBodyDeclaration (// FieldDeclaration MethodDeclaration StaticInitializer ConstructorDeclaration))

;; 8.3 Field Declarations
(rule FieldDeclaration (@ "field" (+ (@ "modifiers" (* FieldModifier)) Type VariableDeclarators semicolon)))

(rule VariableDeclarators (list VariableDeclarator))

(rule VariableDeclarator (@ "var-declarator" (+ VariableDeclaratorId (?+ (tok "=") VariableInitializer))))

(rule VariableDeclaratorId (+ Identifier (* Dim)))

(rule VariableInitializer (// Expression ArrayInitializer))

;;; 8.3.1 Field Modifiers
(rule FieldModifier (// 
                     (@: "public") (@: "protected") (@: "private") (@: "final") (@: "static") (@: "transient") (@: "volatile")))

;; 8.4 Method Declarations
(rule MethodDeclaration (@ "method" (+  MethodHeader MethodBody)))

(rule MethodHeader (+ (@ "modifiers" (* MethodModifier)) ResultType MethodDeclarator (? Throws)))

(rule ResultType (// Type (@: "void")))

(rule MethodDeclarator (+ Identifier FormalParameters))

;;; 8.4.1 Formal Parameters

(rule FormalParameters (@ "formal-params" (parens (? (list FormalParameter)))))

(rule FormalParameter (@ "param" (+ Type VariableDeclaratorId)))

;;; 8.4.3 Method Modifiers
(rule MethodModifier (// (@: "public") (@: "protected") (@: "private") (@: "abstract") (@: "static") (@: "final") (@: "synchronized") (@: "native")))

;;; 8.4.4 Method Throws
(rule Throws (@: "throws" (list ClassOrInterfaceType)))

;;; 8.4.5 Method Body
(rule MethodBody (// Block semicolon))

;; 8.5 Static Initializers
(rule StaticInitializer (+ (@: "static" Block)))

;; 8.6 Constructor Declarations
(rule ConstructorDeclaration (@ "constructor" (+ (@ "modifiers" (* ConstructorModifier)) ConstructorDeclarator (? Throws) ConstructorBody)))

(rule ConstructorDeclarator (+ SimpleTypeName FormalParameters))

(rule SimpleTypeName Identifier)

;;; 8.6.3 Constructor Modifiers
(rule ConstructorModifier (// (@: "public") (@: "protected") (@: "private")))

;;; 8.6.5 Constructor Body
(rule ConstructorBody (@ "block" (braces (+ (? ExplicitConstructorInvocation) (* BlockStatement)))))

(rule ExplicitConstructorInvocation (// (+ (@: "this") Arguments semicolon)
                                        (+ (@: "super") Arguments semicolon)))

;; 9.1 Interface Declarations
(rule InterfaceDeclaration (@.: (@ "modifiers" (* InterfaceModifier)) "interface" Identifier (? ExtendsInterfaces) InterfaceBody))

;;; 9.1.2 Interface Modifiers
(rule InterfaceModifier (// (@: "public") (@: "abstract")))

;;; 9.1.3 Superinterfaces
(rule ExtendsInterfaces (@: "extends" (list ClassOrInterfaceType)))

;;; 9.1.4 Interface Body and Member Declarations
(rule InterfaceBody (braces (* InterfaceMemberDeclaration)))

(rule InterfaceMemberDeclaration (// ConstantDeclaration AbstractMethodDeclaration))

;; 9.3 Field (Constant) Declarations
(rule ConstantDeclaration (+ (@ "modifiers" (* ConstantModifier)) Type VariableDeclarator semicolon))

(rule ConstantModifier (// (@: "public") (@: "static") (@: "final")))

;; 9.4 Abstract Method Declarations
(rule AbstractMethodDeclaration (+ (@ "modifiers" (* AbstractMethodModifier)) ResultType MethodDeclarator (? Throws) semicolon))

(rule AbstractMethodModifier (// (@: "public") (@: "abstract")))

;; 10.6 Arrays Initializers
(rule ArrayInitializer (@ "array-init" (braces (+ (? (list VariableInitializer)) (? comma)))))

;; 14.2 Blocks
(rule Block (@ "block" (braces (* BlockStatement))))

(rule BlockStatement (// LocalVariableDeclarationStatement Statement))

;; 14.3 Local Variable Declaration Statements
(rule LocalVariableDeclarationStatement (+ LocalVariableDeclaration semicolon))

(rule LocalVariableDeclaration (@ "local-var" (+ Type VariableDeclarators)))

;; 14.4 Statements
(rule Statement (// StatementWithoutTrailingSubstatement
                    LabeledStatement
                    (/ IfThenElseStatement
                       IfThenStatement)
                    WhileStatement
                    ForStatement))

(rule StatementNoShortIf (// StatementWithoutTrailingSubstatement
                             LabeledStatementNoShortIf
                             IfThenElseStatementNoShortIf
                             WhileStatementNoShortIf
                             ForStatementNoShortIf))

(rule StatementWithoutTrailingSubstatement (// Block
                                               EmptyStatement
                                               ExpressionStatement
                                               SwitchStatement
                                               DoStatement
                                               BreakStatement
                                               ContinueStatement
                                               ReturnStatement
                                               SynchronizedStatement
                                               ThrowStatement
                                               TryStatement))

;; 14.5 The Empty Statement
(rule EmptyStatement (@ "empty-stmt" semicolon))

;; 14.6 Labeled Statements
(rule LabeledStatement (@ "label" (+ Identifier colon Statement)))

(rule LabeledStatementNoShortIf (@ "label" (+ Identifier colon StatementNoShortIf)))

;; 14.7 Expression Statements
(rule ExpressionStatement (+ Expression semicolon))


;; 14.8 The if Statement
(rule IfThenStatement (@: "if" (parens Expression) Statement))

(rule IfThenElseStatement (@: "if" (parens Expression) StatementNoShortIf (@: "else" Statement)))

(rule IfThenElseStatementNoShortIf (@: "if" (parens Expression) StatementNoShortIf (@: "else" StatementNoShortIf)))

;; 14.9 The switch Statement
(rule SwitchStatement (@: "switch" (parens Expression) SwitchBlock))

(rule SwitchBlock (braces (+ (* SwitchBlockStatementGroup) (? (@ "switch-group" (+ (*1 SwitchLabel) (@ "block" ())))))))

(rule SwitchBlockStatementGroup (@ "switch-group" (+ SwitchLabel (@ "block" (* BlockStatement)))))

(rule SwitchLabel (// (@: "case" ConstantExpression colon) (@: "default" colon)))

;; 14.10 The while Statement
(rule WhileStatement (@: "while" (parens Expression) Statement))

(rule WhileStatementNoShortIf (@: "while" (parens Expression) StatementNoShortIf))

;; 14.11 The do Statement
(rule DoStatement (@: "do" Statement (@: "while" (parens Expression)) semicolon))

;; 14.12 The for Statement
(rule ForStatement (@: "for" (parens (+ (@ "for-init" (? ForInit)) semicolon (@ "for-expr" (? Expression)) semicolon (@ "for-update" (? ForUpdate)))) Statement))

(rule ForStatementNoShortIf (@: "for" (parens (+ (? ForInit) semicolon (? Expression) semicolon (? ForUpdate))) StatementNoShortIf))

(rule ForInit (/ LocalVariableDeclaration (list Expression)))

(rule ForUpdate (list Expression))

;; 14.13 The break Statement
(rule BreakStatement (@: "break" (? Identifier) semicolon))

;; 14.14 The continue Statement
(rule ContinueStatement (@: "continue" (? Identifier) semicolon))

;; 14.15 The return Statement
(rule ReturnStatement (@: "return" (? Expression) semicolon))

;; 14.16 The throw Statement
(rule ThrowStatement (@: "throw" Expression semicolon))

;; 14.17 The synchronized Statement
(rule SynchronizedStatement (@: "synchronized" (parens Expression) Block))

;; 14.18 The try statement
(rule TryStatement (@: "try" Block (// (+ (*1 CatchClause) (! Finally)) (+ (* CatchClause) Finally))))

(rule CatchClause (@: "catch" (parens FormalParameter) Block))

(rule Finally (@: "finally" Block))

;; 15.7 Primary Expressions
(rule Primary (/ ArrayAccess
                 FieldAccess
                 MethodInvocation
                 Literal
                 (@: "this")
                 (@: "super")
                 (+ (parens Expression) (! UnaryExpressionNotPlusMinus))
                 ClassInstanceCreationExpression
                 ArrayCreationExpression
                 ExpressionName))
						  
;; 15.8 Class Instance Creation Expressions
(rule ClassInstanceCreationExpression (@: "new" ClassOrInterfaceType Arguments))

(rule Arguments (@ "arguments" (parens (? Expressions))))

;; 15.9 Array Creation Expressions
(rule ArrayCreationExpression (// (@: "new" (+ PrimitiveType (*1 DimExpr) (* Dim))) 
                                  (@: "new" (+ TypeName (*1 DimExpr) (* Dim)))))

(rule DimExpr (@ "dim-expr" (brackets Expression)))

(rule Dim (@ "dim" (brackets ())))

;; 15.10 Field Access Expressions
(rule FieldAccess (@ "field-access" (+ Primary dot Identifier (! Arguments))))

;; 15.11 Method Invocation Expressions
(rule MethodInvocation (@ "method-invocation" 
                          (+ (/ (+ Primary dot Identifier) MethodName) Arguments)))

;; 15.12 Array Access Expressions
(rule ArrayAccess (@ "array-access" (+ Primary DimExpr)))

;; 15.13 Postfix Expressions
(rule PostfixExpression (/ PostIncrementExpression PostDecrementExpression Primary))

;;; 15.13.2 Postfix Increment Operator ++
(rule PostIncrementExpression (@ "postfix-inc" (+ PostfixExpression (oper "++"))))

;;; 15.13.3 Postfix Decrement Operator --
(rule PostDecrementExpression (@ "postfix-dec" (+ PostfixExpression (oper "--"))))

;; 15.14 Unary Operators
(rule UnaryExpression (/ PreIncrementExpression
                         PreDecrementExpression
                        (@ "pos-expr" (+ (oper "+") UnaryExpression))
                        (@ "neg-expr" (+ (oper "-") UnaryExpression))
                        UnaryExpressionNotPlusMinus))

(rule PreIncrementExpression (@ "prefix-inc" (+ (oper "++") UnaryExpression)))

(rule PreDecrementExpression (@ "prefix-dec" (+ (oper "--") UnaryExpression)))

(rule UnaryExpressionNotPlusMinus (// PostfixExpression
                                      (@ "inv-expr" (+ (oper "~") UnaryExpression))
                                      (@ "not-expr" (+ (oper "!") UnaryExpression))
                                      CastExpression))

;; 15.15 Cast Expressions
(rule CastExpression (@ "cast" (// (+ (parens (+ PrimitiveType (* Dim))) UnaryExpression)
                                   (+ (parens ReferenceType) UnaryExpressionNotPlusMinus))))

;; 15.16 Multiplicative Operators
(rule MultiplicativeExpression (/ (@ "mul-expr" (+ MultiplicativeExpression (oper "*") UnaryExpression))  
                                  (@ "div-expr" (+ MultiplicativeExpression (oper "/") UnaryExpression))
                                  (@ "mod-expr" (+ MultiplicativeExpression (oper "%") UnaryExpression))
                                  UnaryExpression))  

;; 15.17 Additive Operators
(rule AdditiveExpression (/ (@ "add-expr" (+ AdditiveExpression (oper "+") MultiplicativeExpression))
                            (@ "sub-expr" (+ AdditiveExpression (oper "-") MultiplicativeExpression))
                            MultiplicativeExpression))

;; 15.18 Shift Operators
(rule ShiftExpression (/ (@ "rrot-expr" (+ ShiftExpression (oper ">>>") AdditiveExpression))
                         (@ "rsh-expr" (+ ShiftExpression (oper ">>") AdditiveExpression))
                         (@ "lsh-expr" (+ ShiftExpression (oper "<<") AdditiveExpression))
                         AdditiveExpression))

;; 15.19 Relational Operators
(rule RelationalExpression (/ (@ "lt-expr" (+ RelationalExpression (oper "<") ShiftExpression))
                              (@ "gt-expr" (+ RelationalExpression (oper ">") ShiftExpression))
                              (@ "lte-expr" (+ RelationalExpression (oper "<=") ShiftExpression))
                              (@ "gte-expr" (+ RelationalExpression (oper ">=") ShiftExpression))
                              (@ "instanceof-expr" (+ RelationalExpression (tok "instanceof") ReferenceType))
                              ShiftExpression))

;; 15.20 Equality Operators
(rule EqualityExpression (/ (@ "eq-expr" (+ EqualityExpression (oper "==") RelationalExpression))
                            (@ "neq-expr" (+ EqualityExpression (oper "!=") RelationalExpression))
                            RelationalExpression))

;; 15.21 Bitwise and Logical Operators

(rule AndExpression (/ (@ "and-expr" (+ AndExpression (oper "&") EqualityExpression))
                       EqualityExpression))

(rule ExclusiveOrExpression (/ (@ "xor-expr" (+ ExclusiveOrExpression (oper "^") AndExpression))
                               AndExpression))

(rule InclusiveOrExpression (/ (@ "ior-expr" (+ InclusiveOrExpression (oper "|") ExclusiveOrExpression))
                               ExclusiveOrExpression))

; 15.22 Conditional-And Operator &&
(rule ConditionalAndExpression (/ (@ "cond-and-expr" (+ ConditionalAndExpression (oper "&&") InclusiveOrExpression))
                                  InclusiveOrExpression))

;; 15.23 Conditional-Or Operator ||
(rule ConditionalOrExpression (/ (@ "cond-or-expr" (+ ConditionalOrExpression (oper "||") ConditionalAndExpression))
                                 ConditionalAndExpression))

;; 15.24 Conditional Operator ? :
(rule ConditionalExpression (/ (@ "cond-expr" (+ ConditionalOrExpression (oper "?") Expression (oper ":") ConditionalExpression))
                               ConditionalOrExpression))


;; 15.25 Assignment Operators

(rule AssignmentExpression (/ Assignment ConditionalExpression))

(rule Assignment (// (@ "add-assign-expr" (+ LeftHandSide (oper "+=") AssignmentExpression))
                     (@ "sub-assign-expr" (+ LeftHandSide (oper "-=") AssignmentExpression))
                     (@ "mul-assign-expr" (+ LeftHandSide (oper "*=") AssignmentExpression))
                     (@ "div-assign-expr" (+ LeftHandSide (oper "/=") AssignmentExpression))
                     (@ "and-assign-expr" (+ LeftHandSide (oper "&=") AssignmentExpression))
                     (@ "ior-assign-expr" (+ LeftHandSide (oper "|=") AssignmentExpression))
                     (@ "xor-assign-expr" (+ LeftHandSide (oper "^=") AssignmentExpression))
                     (@ "mod-assign-expr" (+ LeftHandSide (oper "%=") AssignmentExpression))
                     (@ "lsh-assign-expr" (+ LeftHandSide (oper "<<=") AssignmentExpression))
                     (@ "rsh-assign-expr" (+ LeftHandSide (oper ">>=") AssignmentExpression))
                     (@ "rot-assign-expr" (+ LeftHandSide (oper ">>>=") AssignmentExpression))
                     (@ "assign-expr" (+ LeftHandSide (oper "=") AssignmentExpression))))

(rule LeftHandSide Primary)


;; 15.26 Expression
(rule Expression AssignmentExpression)

(rule Expressions (list Expression))

;; 15.27 Constant Expression
(rule ConstantExpression Expression)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;    Functional transformation rules for java

{{ functional   

function kw-for (for-init(local-vars...), for-expr(expr), for-update(upd...), stmt) = block(local-vars..., kw-while (expr, block(stmt, upd...))) 
              | (for-init, for-expr(), for-update, stmt) = kw-for(for-init, for-expr(kw-true()), for-update, stmt)


function kw-class (modifiers, clsname, extends, body) = kw-class (modifiers, clsname, extends, kw-implements(), body)
                | (modifiers, clsname, extends, kw-implements(interfaces...), body) = typecheck(Scope(This(), Class_info(clsname), BottomScope()), classdef(modifiers, clsname, extends, body))

function typecheck (e, classdef(modifiers, clsname, extends, body(elems...))) = map(function (el) = typecheck(e, el), lst(elems...))
                 | (e, field (modifiers, type, decls...)) = and(map(function (var-declarator(varname, initializer)) = and(put-symbol(Field(typecheck (e, expression-name(This())), varname), resolve-type(type)), type<=(typecheck(e, initializer), type))
                                                                           | (var-declarator(varname)) = put-symbol(Field(typecheck (e, expression-name(This())), varname), resolve-type(type)), lst(decls...)), type)

                 | (e, method (modifiers, mtype, mname, formal-params, kw-throws(excs...))) = typecheck (e, method (modifiers, mtype, mname, formal-params, kw-throws(excs...), block()))
                 | (e, method (modifiers, mtype, mname, formal-params(elems...))) = typecheck (e, method (modifiers, mtype, mname, formal-params(elems...), kw-throws(), block()))
                 | (e, method (modifiers, mtype, mname, formal-params(elems...), block)) = typecheck (e, method (modifiers, mtype, mname, formal-params(elems...), kw-throws(), block))
                 | (e, method (modifiers, mtype, mname, formal-params(elems...), kw-throws(excs...), block)) = and(put-symbol(Method(typecheck (e, expression-name(This())), mname, map(function (param(ptype, pname)) = resolve-type(ptype), 
                                                                                                                                                                                     lst(elems...))), resolve-type(mtype)), 
                                                                                                                typecheck(foldl(function (env, param(ptype, pname)) = 
                                                                                                                                         Scope(pname, resolve-type(ptype), env), 
                                                                                                                                Scope(Method(), resolve-type(mtype), e), 
                                                                                                                                lst(elems...)), block), 
                                                                                                                map(function (exc) = type<=(resolve-type(exc), Class_info("java", "lang", "Throwable")), lst(excs...)), 
                                                                                                                resolve-type(mtype))

                 | (e, constructor (modifiers, name, params, block(elems...))) = and(map(function (el) = typecheck(e, el), lst(elems...)), void-type())

                 | (e, block(local-var(type), rest...)) = typecheck(e, block(rest...))
                 | (e, block(local-var(type, var-declarator(name, init), declarators...), rest...)) = and(warn-type<=(typecheck(Scope(name, resolve-type(type), e), init), resolve-type(type), init), typecheck(Scope(name, resolve-type(type), e), block(local-var(type, declarators...), rest...))) ; TODO: let
                 | (e, block(local-var(type, var-declarator(name), declarators...), rest...)) = typecheck(Scope(name, resolve-type(type), e), block(local-var(type, declarators...), rest...))
                 | (e, block(stmt, rest...)) = and(typecheck(e, stmt), typecheck(e, block(rest...)))
                 | (e, block(rest...)) = void-type()

                 | (e, method-invocation (name, arguments(elems...))) = method-invocation (kw-this(), name, arguments(elems...))
                 | (e, method-invocation (class, name, arguments(elems...))) = 
                         lookup(Method(typecheck(e, class), name, map(function (el) = typecheck(e, el), lst(elems...))))

                 | (e, kw-super (arguments(elems...))) = and(map(function (el) = typecheck(e, el), lst(elems...)), void-type())

                 | (e, field-access (type_expr, field)) = lookup(Field(type_expr, field))

                 | (e, eq-expr (expr1, expr2)) = and(type-union(typecheck(e, expr1), typecheck(e, expr2)), bool-type())
                 | (e, lt-expr(expr1, expr2)) = and(type<=(type-union(typecheck(e, expr1), typecheck(e, expr2)), float-type()), bool-type())
                 | (e, gt-expr(expr1, expr2)) = and(type<=(type-union(typecheck(e, expr1), typecheck(e, expr2)), float-type()), bool-type())
                 | (e, lte-expr(expr1, expr2)) = and(type<=(type-union(typecheck(e, expr1), typecheck(e, expr2)), float-type()), bool-type())
                 | (e, gte-expr(expr1, expr2)) = and(type<=(type-union(typecheck(e, expr1), typecheck(e, expr2)), float-type()), bool-type())
                 | (e, instanceof-expr(expr1, expr2)) = and(type<=(typecheck(e, expr1), typecheck(e, expr2)), bool-type())

                 | (e, add-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, sub-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, mul-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, div-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, and-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, ior-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, xor-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, mod-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, lsh-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, rsh-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, rot-assign-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, assign-expr (left, right)) = and(warn-type<=(typecheck(e, right), typecheck(e, left), right), typecheck(e, left))

                 | (e, add-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, sub-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, div-expr(left, right)) = type-union(typecheck(e, left), typecheck(e, right))
                 | (e, neg-expr(expr)) = typecheck(e, expr)

                 | (e, prefix-inc(expression-name(name))) = and(type<=(typecheck(e, expression-name(name)), int-type()), typecheck(e, expression-name(name)))  ; TODO: let
                 | (e, postfix-inc(expression-name(name))) = and(type<=(typecheck(e, expression-name(name)), int-type()), typecheck(e, expression-name(name)))  ; TODO: let

                 | (e, cast (type, expr))= and(or(type<=(typecheck(e, expr), resolve-type(type)), type<=(resolve-type(type), typecheck(e, expr))), resolve-type(type))  ; TODO: let, get rules correct for interfaces
                 | (e, kw-new (type-name, arguments(elems...))) = and(map(function (el) = typecheck(e, el), lst(elems...)), resolve-type(type-name))
                 | (e, kw-new (type-name, dims...)) = and(map(function (dim-expr(expr)) = type<=(typecheck(e, expr), byte-type()), lst(dims...)), array-type(resolve-type(type-name)))

                 | (e, kw-return (val)) = and(type<=(typecheck(e, val), typecheck(e, expression-name (Method()))), typecheck(e, val))   ; TODO: let
                 | (e, kw-return()) = and(type<=(void-type(), typecheck(e, expression-name (Method()))), void-type())
                 | (e, label (name, block)) = typecheck(Scope(Label(name), void-type(), e), block)
                 | (e, kw-break (lbl)) = typecheck(e, expression-name(Label(lbl)))
                 | (e, kw-break ()) = void-type()
                 | (e, kw-continue (lbl)) = typecheck(e, expression-name(Label(lbl)))
                 | (e, kw-continue ()) = void-type()
                 | (e, kw-throw (expr)) = and(warn-type<=(typecheck(e, expr), Class_info("java", "lang", "Throwable"), expr), void-type())

                 | (e, kw-while (cond, stmt)) = and(type<=(typecheck(e, cond), bool-type()), typecheck(e, stmt))
                 | (e, kw-do (stmt, kw-while(cond))) = and(type<=(typecheck(e, cond), bool-type()), typecheck(e, stmt))
                 | (e, kw-switch (expr, switch-groups...)) = and(type<=(typecheck(e, expr), int-type()),
                                                                 map(function (switch-group (kw-case (tag), block)) = and(type<=(typecheck(e, tag), int-type()), typecheck(e, block))
                                                                            | (switch-group (kw-default(), block)) = typecheck(e, block), 
                                                                     lst(switch-groups...)))
                   
                 | (e, kw-if (pred, stmt)) = typecheck(e, kw-if (pred, stmt, kw-else(empty-stmt())))
                 | (e, kw-if (pred, then-stmt, kw-else(else-stmt))) = and(type<=(typecheck(e, pred), bool-type()), typecheck(e, then-stmt), typecheck(e, else-stmt), void-type())
                 | (e, kw-try (try-block, catches...)) = and(typecheck(e, try-block),
                                                             map(function (kw-catch(param (type, name), catch-block)) = and(type<=(resolve-type(type), Class_info("java", "lang", "Throwable")), 
                                                                                                                            typecheck(Scope(name, resolve-type(type), e), catch-block))
                                                                        | (kw-finally (finally-block)) = typecheck(e, finally-block),
                                                                 lst(catches...)), void-type())
                 | (e, kw-synchronized(expr, block)) = and(typecheck(e, expr), typecheck(e, block))

                 | (Scope(name, type, e), expression-name (name)) = type
                 | (Scope(name, type, BottomScope()), expression-name(Label(lbl))) = seq(message("error", lbl, "undefined label: ", lbl), false())
                 | (Scope(This(), type, BottomScope()), expression-name(name)) = get-symbol(Field (type, name))
                 | (Scope(name1, type, e), expression-name (name2)) = typecheck(e, expression-name (name2))

                 | (Scope(This(), type, BottomScope()), kw-this()) = type
                 | (Scope(name1, type, e), kw-this()) = typecheck(e, kw-this())

                 | (e, ambiguous-name(class, name)) = lookup(Field(typecheck(e, class), name))
                 | (e, ambiguous-name(name)) = or(lookup(Type(name)), typecheck(e, expression-name(name)))
                 | (e, expression-name(class, name)) = lookup(Field(typecheck(e, class), name))

                 | (e, array-type(inner)) = array-type(inner)

                 | (e, string(s)) = Class_info("java", "lang", "String")
                 | (e, integer(i)) = byte-type()
                 | (e, floating-point(f)) = float-type()
                 | (e, char(c)) = char-type()
                 | (e, array-init()) = array-type()
                 | (e, array-init(vals...)) = array-type(reduce(function (t1, t2) = type-union(t1, t2), map(function (val) = typecheck(e, val), lst(vals...))))

                 | (e, kw-true()) = bool-type()
                 | (e, kw-false()) = bool-type()

                 | (e, kw-null()) = null-type()
                 | (e, empty-stmt()) = void-type()
				 
function resolve-type (kw-int()) = int-type()
                    | (kw-short()) = short-type()
                    | (kw-byte()) = byte-type()
                    | (kw-char()) = char-type()
                    | (kw-float()) = float-type()
                    | (kw-double()) = double-type()
                    | (kw-void()) = void-type()
                    | (kw-boolean()) = bool-type()
                    | (array-type(type)) = array-type(resolve-type(type))
                    | (type-name (package, name)) = lookup(Type(package, name))
                    | (type-name (name)) = lookup(Type(name))
                    


				 
;function disambiguate (ambiguous-name(ambiguous-name("System"), "out")) = field-access(Class_info("java", "lang", "System"), "out")

function lookup (Type("System")) = Class_info("java", "lang", "System")
              | (Type("String")) = Class_info("java", "lang", "String")
              | (Type("Object")) = Class_info("java", "lang", "Object")
              | (Type("Exception")) = Class_info("java", "lang", "Exception")
              | (Type("RuntimeException")) = Class_info("java", "lang", "RuntimeException")
              | (Type("ClassNotFoundException")) = Class_info("java", "lang", "ClassNotFoundException")
              | (Type("Throwable")) = Class_info("java", "lang", "Throwable")
              | (Type("Error")) = Class_info("java", "lang", "Error")
              | (Type(package-name("java", "io"), "IOException")) = Class_info("java", "io", "IOException")
              | (Type(package-name("java", "io"), "Serializable")) = Class_info("java", "io", "Serializable")
              | (Type("NullPointerException")) = Class_info("java", "lang", "NullPointerException")
              | (Type("ArithmeticException")) = Class_info("java", "lang", "ArithmeticException")
              | (Type("ClassCastException")) = Class_info("java", "lang", "ClassCastException")
              | (Type("Integer")) = Class_info("java", "lang", "Integer")

              | (Field (array-type(type), "length")) = int-type()

              | (Field (Class_info("java", "lang", "System"), "out")) = Class_info("java", "io", "PrintStream")
              | (Method(Class_info("java", "io", "PrintStream"), "println", lst(Class_info("java", "lang", "String")))) = void-type()
              | (Method(Class_info("java", "io", "PrintStream"), "println", lst())) = void-type()
              | (Field(array-type (type-name("String")), "length")) = int-type()
              | (Field(type-name(t), "System")) = false()
              | (Field(type, Label(lab))) = false()

              | (Type("args")) = false()
              | (Field("val")) = int-type()
              | (Field("str")) = Class_info("java", "lang", "String")
              | (Field("i")) = Class_info("java", "lang", "Object")
;              | (Field(type-name("T842is2"), "x")) = int-type()
;              | (Field(type-name("T842is2"), "y")) = int-type()
              | (Type(package-name("test"), "T147same1")) = false()  ; should give error in test file
              | (Method(Class_info("java", "lang", "System"), "exit", lst(byte-type))) = void-type()
              | (Field (Class_info("java", "lang", "Integer"), "MAX_VALUE")) = int-type()

function warn-type<= (t1, t2, expr) = true() if type<= (t1, t2) else seq(message("error", expr, "incompatible types"), false())

; type<= (t1, t2) : an expression of type t1 can be assigned to a variable of type t2
function type<= (t, t) = true()
              | (null-type(), Class_info("java", "lang", "Object")) = true()
              | (null-type(), array-type(a)) = true()
              | (null-type(), type) = type<=(null-type(), type-parent(type))
              | (array-type(t1), array-type(t2)) = type<=(t1, t2)
              | (array-type(), array-type(t)) = true()
              | (t, array-type(a)) = false()
              | (array-type(a), t) = false()
              | (void-type(), t) = false()
              | (double-type(), Class_info(names...)) = false()
              | (double-type(), type-name("Object")) = false()
              | (Class_info("java", "lang", "Object"), t) = false()
              | (t, bool-type()) = false()
              | (bool-type(), t) = false()
              | (double-type(), t) = false()
              | (t1, t2) = type<=(type-parent(t1), t2)


; type-parent (tc) = tp : tp is the parent of type tc
function type-parent (float-type()) = double-type()
                   | (long-type()) = float-type()
                   | (int-type()) = long-type()
                   | (char-type()) = int-type()
                   | (short-type()) = int-type()
                   | (byte-type()) = short-type()
                   | (void-type()) = void-type()
                   | (Class_info("java", "lang", "RuntimeException")) = Class_info("java", "lang", "Exception")
                   | (Class_info("java", "lang", "Exception")) = Class_info("java", "lang", "Throwable")
                   | (Class_info("java", "lang", "Error")) = Class_info("java", "lang", "Throwable")
                   | (Class_info("java", "lang", "Throwable")) = Class_info("java", "lang", "Object")
                   | (Class_info("java", "io", "IOException")) = Class_info("java", "lang", "Exception")
                   | (Class_info("java", "lang", "String")) = Class_info("java", "lang", "Object")
                   | (Class_info("java", "io", "Serializable")) = Class_info("java", "lang", "Object")
                   | (Class_info("java", "lang", "NullPointerException")) = Class_info("java", "lang", "RuntimeException")
                   | (Class_info("java", "lang", "ClassNotFoundException")) = Class_info("java", "lang", "Exception")
                   | (Class_info("java", "lang", "ArithmeticException")) = Class_info("java", "lang", "RuntimeException")
                   | (Class_info("java", "lang", "ClassCastException")) = Class_info("java", "lang", "RuntimeException")
                   | (Class_info("java", "lang", "Integer")) = Class_info("java", "lang", "Number")
                   | (Class_info("java", "lang", "Number")) = Class_info("java", "lang", "Object")

function type-union (t, t) = t
                  | (void-type(), t) = t
                  | (t, void-type()) = t
                  | (short-type(), char-type()) = int-type()
                  | (int-type(), byte-type()) = int-type()
                  | (byte-type(), int-type()) = int-type()
                  | (array-type(t), null-type()) = array-type(t)


function put-symbol (sym, val) = symtable-put(sym, val)
function get-symbol (sym) = symtable-get(sym, false())
}}


